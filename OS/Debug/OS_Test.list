
OS_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000389c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a9c  08003a9c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003a9c  08003a9c  00013a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003aa4  08003aa4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa4  08003aa4  00013aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aa8  08003aa8  00013aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000402c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000403c  2000403c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e207  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e1  00000000  00000000  0002e247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  00030628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b58  00000000  00000000  00031268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002412e  00000000  00000000  00031dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e071  00000000  00000000  00055eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df084  00000000  00000000  00063f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142fe3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000310c  00000000  00000000  00143034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003a34 	.word	0x08003a34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08003a34 	.word	0x08003a34

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <vApplicationGetIdleTaskMemory+0x2c>)
 8000514:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <vApplicationGetIdleTaskMemory+0x30>)
 800051a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000522:	bf00      	nop
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	2000002c 	.word	0x2000002c
 8000534:	20000080 	.word	0x20000080

08000538 <LED_Test>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LED_Test(void *pvparameters) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]

	char temp2[] = "Main Task\r\n";
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <LED_Test+0x38>)
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	ca07      	ldmia	r2, {r0, r1, r2}
 8000548:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (;;) {
		HAL_UART_Transmit(&huart1, (uint8_t*) temp2, strlen(temp2), 10);
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff fe4d 	bl	80001f0 <strlen>
 8000556:	4603      	mov	r3, r0
 8000558:	b29a      	uxth	r2, r3
 800055a:	f107 010c 	add.w	r1, r7, #12
 800055e:	230a      	movs	r3, #10
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <LED_Test+0x3c>)
 8000562:	f001 fcd6 	bl	8001f12 <HAL_UART_Transmit>
		//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
		vTaskDelay(500 / portTICK_RATE_MS);
 8000566:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800056a:	f002 fa95 	bl	8002a98 <vTaskDelay>
	for (;;) {
 800056e:	e7ed      	b.n	800054c <LED_Test+0x14>
 8000570:	08003a4c 	.word	0x08003a4c
 8000574:	200002a0 	.word	0x200002a0

08000578 <OTA_TASK>:
		//HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xBEBE);
		//HAL_PWR_DisableBkUpAccess();
	}
}

void OTA_TASK(void *pvparameters) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	TickType_t xDelay = 250 / portTICK_RATE_MS;
 8000580:	23fa      	movs	r3, #250	; 0xfa
 8000582:	617b      	str	r3, [r7, #20]
	char temp[] = "OTA Task\r\n";
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <OTA_TASK+0x44>)
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	ca07      	ldmia	r2, {r0, r1, r2}
 800058c:	c303      	stmia	r3!, {r0, r1}
 800058e:	801a      	strh	r2, [r3, #0]
 8000590:	3302      	adds	r3, #2
 8000592:	0c12      	lsrs	r2, r2, #16
 8000594:	701a      	strb	r2, [r3, #0]
	for (;;) {
		taskENTER_CRITICAL();
 8000596:	f002 ff55 	bl	8003444 <vPortEnterCritical>
		HAL_UART_Transmit(&huart1, (uint8_t*) temp, strlen(temp), 10);
 800059a:	f107 0308 	add.w	r3, r7, #8
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff fe26 	bl	80001f0 <strlen>
 80005a4:	4603      	mov	r3, r0
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	f107 0108 	add.w	r1, r7, #8
 80005ac:	230a      	movs	r3, #10
 80005ae:	4804      	ldr	r0, [pc, #16]	; (80005c0 <OTA_TASK+0x48>)
 80005b0:	f001 fcaf 	bl	8001f12 <HAL_UART_Transmit>
		taskEXIT_CRITICAL();
 80005b4:	f002 ff76 	bl	80034a4 <vPortExitCritical>
	for (;;) {
 80005b8:	e7ed      	b.n	8000596 <OTA_TASK+0x1e>
 80005ba:	bf00      	nop
 80005bc:	08003a58 	.word	0x08003a58
 80005c0:	200002a0 	.word	0x200002a0

080005c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ca:	f000 fa25 	bl	8000a18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005ce:	f000 f825 	bl	800061c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005d2:	f000 f8d5 	bl	8000780 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80005d6:	f000 f8a9 	bl	800072c <MX_USART1_UART_Init>
	MX_RTC_Init();
 80005da:	f000 f881 	bl	80006e0 <MX_RTC_Init>
	xTaskCreate(OTA_TASK, (const char* const ) "ota task", 240, 0, 1, NULL);
 80005de:	2300      	movs	r3, #0
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	22f0      	movs	r2, #240	; 0xf0
 80005ea:	4908      	ldr	r1, [pc, #32]	; (800060c <main+0x48>)
 80005ec:	4808      	ldr	r0, [pc, #32]	; (8000610 <main+0x4c>)
 80005ee:	f002 f91d 	bl	800282c <xTaskCreate>
	xTaskCreate(LED_Test, (const char* const ) "main task",240, 0, 2, NULL);
 80005f2:	2300      	movs	r3, #0
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2302      	movs	r3, #2
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	22f0      	movs	r2, #240	; 0xf0
 80005fe:	4905      	ldr	r1, [pc, #20]	; (8000614 <main+0x50>)
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <main+0x54>)
 8000602:	f002 f913 	bl	800282c <xTaskCreate>
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000606:	f001 fff9 	bl	80025fc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800060a:	e7fe      	b.n	800060a <main+0x46>
 800060c:	08003a64 	.word	0x08003a64
 8000610:	08000579 	.word	0x08000579
 8000614:	08003a70 	.word	0x08003a70
 8000618:	08000539 	.word	0x08000539

0800061c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 f9fa 	bl	8003a24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <SystemClock_Config+0xbc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a23      	ldr	r2, [pc, #140]	; (80006d8 <SystemClock_Config+0xbc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemClock_Config+0xbc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <SystemClock_Config+0xc0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000668:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <SystemClock_Config+0xc0>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemClock_Config+0xc0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800067c:	230a      	movs	r3, #10
 800067e:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fcdd 	bl	8001054 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x88>
		Error_Handler();
 80006a0:	f000 f8b2 	bl	8000808 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 ff40 	bl	8001544 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xb2>
		Error_Handler();
 80006ca:	f000 f89d 	bl	8000808 <Error_Handler>
	}
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_RTC_Init+0x44>)
 80006e6:	4a10      	ldr	r2, [pc, #64]	; (8000728 <MX_RTC_Init+0x48>)
 80006e8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_RTC_Init+0x44>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_RTC_Init+0x44>)
 80006f2:	227f      	movs	r2, #127	; 0x7f
 80006f4:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_RTC_Init+0x44>)
 80006f8:	22ff      	movs	r2, #255	; 0xff
 80006fa:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_RTC_Init+0x44>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_RTC_Init+0x44>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_RTC_Init+0x44>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_RTC_Init+0x44>)
 8000710:	f001 fab8 	bl	8001c84 <HAL_RTC_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_RTC_Init+0x3e>
		Error_Handler();
 800071a:	f000 f875 	bl	8000808 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000280 	.word	0x20000280
 8000728:	40002800 	.word	0x40002800

0800072c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	; (800077c <MX_USART1_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_USART1_UART_Init+0x4c>)
 8000764:	f001 fb88 	bl	8001e78 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800076e:	f000 f84b 	bl	8000808 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200002a0 	.word	0x200002a0
 800077c:	40011000 	.word	0x40011000

08000780 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_GPIO_Init+0x80>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_GPIO_Init+0x80>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_GPIO_Init+0x80>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_GPIO_Init+0x80>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a11      	ldr	r2, [pc, #68]	; (8000800 <MX_GPIO_Init+0x80>)
 80007bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_GPIO_Init+0x80>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <MX_GPIO_Init+0x84>)
 80007d6:	f000 fc23 	bl	8001020 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PG13 PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 80007da:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80007de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4619      	mov	r1, r3
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_GPIO_Init+0x84>)
 80007f4:	f000 fa68 	bl	8000cc8 <HAL_GPIO_Init>

}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40021800 	.word	0x40021800

08000808 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_MspInit+0x54>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a11      	ldr	r2, [pc, #68]	; (8000868 <HAL_MspInit+0x54>)
 8000824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000828:	6453      	str	r3, [r2, #68]	; 0x44
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_MspInit+0x54>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <HAL_MspInit+0x54>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <HAL_MspInit+0x54>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_MspInit+0x54>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	210f      	movs	r1, #15
 8000856:	f06f 0001 	mvn.w	r0, #1
 800085a:	f000 fa0c 	bl	8000c76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08e      	sub	sp, #56	; 0x38
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	2230      	movs	r2, #48	; 0x30
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f003 f8d1 	bl	8003a24 <memset>
  if(hrtc->Instance==RTC)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <HAL_RTC_MspInit+0x4c>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d111      	bne.n	80008b0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800088c:	2320      	movs	r3, #32
 800088e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000894:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4618      	mov	r0, r3
 800089c:	f001 f832 	bl	8001904 <HAL_RCCEx_PeriphCLKConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80008a6:	f7ff ffaf 	bl	8000808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <HAL_RTC_MspInit+0x50>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80008b0:	bf00      	nop
 80008b2:	3738      	adds	r7, #56	; 0x38
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40002800 	.word	0x40002800
 80008bc:	42470e3c 	.word	0x42470e3c

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a19      	ldr	r2, [pc, #100]	; (8000944 <HAL_UART_MspInit+0x84>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d12c      	bne.n	800093c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a17      	ldr	r2, [pc, #92]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008ec:	f043 0310 	orr.w	r3, r3, #16
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a10      	ldr	r2, [pc, #64]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800091a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800092c:	2307      	movs	r3, #7
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <HAL_UART_MspInit+0x8c>)
 8000938:	f000 f9c6 	bl	8000cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	; 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40011000 	.word	0x40011000
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 f89c 	bl	8000abc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000984:	f002 fbb0 	bl	80030e8 <xTaskGetSchedulerState>
 8000988:	4603      	mov	r3, r0
 800098a:	2b01      	cmp	r3, #1
 800098c:	d001      	beq.n	8000992 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800098e:	f002 fdeb 	bl	8003568 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <SystemInit+0x28>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <SystemInit+0x28>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <SystemInit+0x28>)
 80009ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009fc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ca:	490e      	ldr	r1, [pc, #56]	; (8000a04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009cc:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e0:	4c0b      	ldr	r4, [pc, #44]	; (8000a10 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ee:	f7ff ffd3 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f2:	f002 fff3 	bl	80039dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f6:	f7ff fde5 	bl	80005c4 <main>
  bx  lr    
 80009fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80009fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a08:	08003aac 	.word	0x08003aac
  ldr r2, =_sbss
 8000a0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a10:	2000403c 	.word	0x2000403c

08000a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <HAL_Init+0x40>)
 8000a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_Init+0x40>)
 8000a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_Init+0x40>)
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f90d 	bl	8000c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a46:	200f      	movs	r0, #15
 8000a48:	f000 f808 	bl	8000a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4c:	f7ff fee2 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023c00 	.word	0x40023c00

08000a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_InitTick+0x54>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_InitTick+0x58>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f917 	bl	8000cae <HAL_SYSTICK_Config>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00e      	b.n	8000aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b0f      	cmp	r3, #15
 8000a8e:	d80a      	bhi.n	8000aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a90:	2200      	movs	r2, #0
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f000 f8ed 	bl	8000c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <HAL_InitTick+0x5c>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e000      	b.n	8000aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	200002e4 	.word	0x200002e4

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	200002e4 	.word	0x200002e4

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c2c:	d301      	bcc.n	8000c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00f      	b.n	8000c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <SysTick_Config+0x40>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f7ff ff8e 	bl	8000b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <SysTick_Config+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SysTick_Config+0x40>)
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	e000e010 	.word	0xe000e010

08000c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ff47 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c88:	f7ff ff5c 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	68b9      	ldr	r1, [r7, #8]
 8000c92:	6978      	ldr	r0, [r7, #20]
 8000c94:	f7ff ff8e 	bl	8000bb4 <NVIC_EncodePriority>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff5d 	bl	8000b60 <__NVIC_SetPriority>
}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ffb0 	bl	8000c1c <SysTick_Config>
 8000cbc:	4603      	mov	r3, r0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e177      	b.n	8000fd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f040 8166 	bne.w	8000fce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d005      	beq.n	8000d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d130      	bne.n	8000d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d50:	2201      	movs	r2, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	f003 0201 	and.w	r2, r3, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d017      	beq.n	8000db8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d123      	bne.n	8000e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	08da      	lsrs	r2, r3, #3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	220f      	movs	r2, #15
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3208      	adds	r2, #8
 8000e06:	69b9      	ldr	r1, [r7, #24]
 8000e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0203 	and.w	r2, r3, #3
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 80c0 	beq.w	8000fce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b66      	ldr	r3, [pc, #408]	; (8000fec <HAL_GPIO_Init+0x324>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a65      	ldr	r2, [pc, #404]	; (8000fec <HAL_GPIO_Init+0x324>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b63      	ldr	r3, [pc, #396]	; (8000fec <HAL_GPIO_Init+0x324>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e6a:	4a61      	ldr	r2, [pc, #388]	; (8000ff0 <HAL_GPIO_Init+0x328>)
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	3302      	adds	r3, #2
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	220f      	movs	r2, #15
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a58      	ldr	r2, [pc, #352]	; (8000ff4 <HAL_GPIO_Init+0x32c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d037      	beq.n	8000f06 <HAL_GPIO_Init+0x23e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a57      	ldr	r2, [pc, #348]	; (8000ff8 <HAL_GPIO_Init+0x330>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d031      	beq.n	8000f02 <HAL_GPIO_Init+0x23a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a56      	ldr	r2, [pc, #344]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d02b      	beq.n	8000efe <HAL_GPIO_Init+0x236>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a55      	ldr	r2, [pc, #340]	; (8001000 <HAL_GPIO_Init+0x338>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d025      	beq.n	8000efa <HAL_GPIO_Init+0x232>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a54      	ldr	r2, [pc, #336]	; (8001004 <HAL_GPIO_Init+0x33c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d01f      	beq.n	8000ef6 <HAL_GPIO_Init+0x22e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a53      	ldr	r2, [pc, #332]	; (8001008 <HAL_GPIO_Init+0x340>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d019      	beq.n	8000ef2 <HAL_GPIO_Init+0x22a>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a52      	ldr	r2, [pc, #328]	; (800100c <HAL_GPIO_Init+0x344>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d013      	beq.n	8000eee <HAL_GPIO_Init+0x226>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a51      	ldr	r2, [pc, #324]	; (8001010 <HAL_GPIO_Init+0x348>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d00d      	beq.n	8000eea <HAL_GPIO_Init+0x222>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a50      	ldr	r2, [pc, #320]	; (8001014 <HAL_GPIO_Init+0x34c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d007      	beq.n	8000ee6 <HAL_GPIO_Init+0x21e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4f      	ldr	r2, [pc, #316]	; (8001018 <HAL_GPIO_Init+0x350>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d101      	bne.n	8000ee2 <HAL_GPIO_Init+0x21a>
 8000ede:	2309      	movs	r3, #9
 8000ee0:	e012      	b.n	8000f08 <HAL_GPIO_Init+0x240>
 8000ee2:	230a      	movs	r3, #10
 8000ee4:	e010      	b.n	8000f08 <HAL_GPIO_Init+0x240>
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	e00e      	b.n	8000f08 <HAL_GPIO_Init+0x240>
 8000eea:	2307      	movs	r3, #7
 8000eec:	e00c      	b.n	8000f08 <HAL_GPIO_Init+0x240>
 8000eee:	2306      	movs	r3, #6
 8000ef0:	e00a      	b.n	8000f08 <HAL_GPIO_Init+0x240>
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	e008      	b.n	8000f08 <HAL_GPIO_Init+0x240>
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	e006      	b.n	8000f08 <HAL_GPIO_Init+0x240>
 8000efa:	2303      	movs	r3, #3
 8000efc:	e004      	b.n	8000f08 <HAL_GPIO_Init+0x240>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e002      	b.n	8000f08 <HAL_GPIO_Init+0x240>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <HAL_GPIO_Init+0x240>
 8000f06:	2300      	movs	r3, #0
 8000f08:	69fa      	ldr	r2, [r7, #28]
 8000f0a:	f002 0203 	and.w	r2, r2, #3
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	4093      	lsls	r3, r2
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f18:	4935      	ldr	r1, [pc, #212]	; (8000ff0 <HAL_GPIO_Init+0x328>)
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f26:	4b3d      	ldr	r3, [pc, #244]	; (800101c <HAL_GPIO_Init+0x354>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f4a:	4a34      	ldr	r2, [pc, #208]	; (800101c <HAL_GPIO_Init+0x354>)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f50:	4b32      	ldr	r3, [pc, #200]	; (800101c <HAL_GPIO_Init+0x354>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f74:	4a29      	ldr	r2, [pc, #164]	; (800101c <HAL_GPIO_Init+0x354>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f7a:	4b28      	ldr	r3, [pc, #160]	; (800101c <HAL_GPIO_Init+0x354>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f9e:	4a1f      	ldr	r2, [pc, #124]	; (800101c <HAL_GPIO_Init+0x354>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <HAL_GPIO_Init+0x354>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc8:	4a14      	ldr	r2, [pc, #80]	; (800101c <HAL_GPIO_Init+0x354>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	f67f ae84 	bls.w	8000ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40013800 	.word	0x40013800
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020c00 	.word	0x40020c00
 8001004:	40021000 	.word	0x40021000
 8001008:	40021400 	.word	0x40021400
 800100c:	40021800 	.word	0x40021800
 8001010:	40021c00 	.word	0x40021c00
 8001014:	40022000 	.word	0x40022000
 8001018:	40022400 	.word	0x40022400
 800101c:	40013c00 	.word	0x40013c00

08001020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001030:	787b      	ldrb	r3, [r7, #1]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800103c:	e003      	b.n	8001046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800103e:	887b      	ldrh	r3, [r7, #2]
 8001040:	041a      	lsls	r2, r3, #16
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	619a      	str	r2, [r3, #24]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e267      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d075      	beq.n	800115e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001072:	4b88      	ldr	r3, [pc, #544]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b04      	cmp	r3, #4
 800107c:	d00c      	beq.n	8001098 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800107e:	4b85      	ldr	r3, [pc, #532]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001086:	2b08      	cmp	r3, #8
 8001088:	d112      	bne.n	80010b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108a:	4b82      	ldr	r3, [pc, #520]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001096:	d10b      	bne.n	80010b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	4b7e      	ldr	r3, [pc, #504]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d05b      	beq.n	800115c <HAL_RCC_OscConfig+0x108>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d157      	bne.n	800115c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e242      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b8:	d106      	bne.n	80010c8 <HAL_RCC_OscConfig+0x74>
 80010ba:	4b76      	ldr	r3, [pc, #472]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a75      	ldr	r2, [pc, #468]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e01d      	b.n	8001104 <HAL_RCC_OscConfig+0xb0>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010d0:	d10c      	bne.n	80010ec <HAL_RCC_OscConfig+0x98>
 80010d2:	4b70      	ldr	r3, [pc, #448]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a6f      	ldr	r2, [pc, #444]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	4b6d      	ldr	r3, [pc, #436]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a6c      	ldr	r2, [pc, #432]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e00b      	b.n	8001104 <HAL_RCC_OscConfig+0xb0>
 80010ec:	4b69      	ldr	r3, [pc, #420]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a68      	ldr	r2, [pc, #416]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b66      	ldr	r3, [pc, #408]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a65      	ldr	r2, [pc, #404]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80010fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d013      	beq.n	8001134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fcea 	bl	8000ae4 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fce6 	bl	8000ae4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e207      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	4b5b      	ldr	r3, [pc, #364]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0f0      	beq.n	8001114 <HAL_RCC_OscConfig+0xc0>
 8001132:	e014      	b.n	800115e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fcd6 	bl	8000ae4 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fcd2 	bl	8000ae4 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e1f3      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114e:	4b51      	ldr	r3, [pc, #324]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0xe8>
 800115a:	e000      	b.n	800115e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d063      	beq.n	8001232 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800116a:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800117e:	2b08      	cmp	r3, #8
 8001180:	d11c      	bne.n	80011bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001182:	4b44      	ldr	r3, [pc, #272]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d116      	bne.n	80011bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118e:	4b41      	ldr	r3, [pc, #260]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d005      	beq.n	80011a6 <HAL_RCC_OscConfig+0x152>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d001      	beq.n	80011a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e1c7      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	4937      	ldr	r1, [pc, #220]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ba:	e03a      	b.n	8001232 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d020      	beq.n	8001206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c4:	4b34      	ldr	r3, [pc, #208]	; (8001298 <HAL_RCC_OscConfig+0x244>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ca:	f7ff fc8b 	bl	8000ae4 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d2:	f7ff fc87 	bl	8000ae4 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e1a8      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e4:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f0:	4b28      	ldr	r3, [pc, #160]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4925      	ldr	r1, [pc, #148]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001200:	4313      	orrs	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
 8001204:	e015      	b.n	8001232 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001206:	4b24      	ldr	r3, [pc, #144]	; (8001298 <HAL_RCC_OscConfig+0x244>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120c:	f7ff fc6a 	bl	8000ae4 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001214:	f7ff fc66 	bl	8000ae4 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e187      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d036      	beq.n	80012ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d016      	beq.n	8001274 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_RCC_OscConfig+0x248>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124c:	f7ff fc4a 	bl	8000ae4 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff fc46 	bl	8000ae4 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e167      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_RCC_OscConfig+0x240>)
 8001268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0x200>
 8001272:	e01b      	b.n	80012ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_RCC_OscConfig+0x248>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127a:	f7ff fc33 	bl	8000ae4 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001280:	e00e      	b.n	80012a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001282:	f7ff fc2f 	bl	8000ae4 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d907      	bls.n	80012a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e150      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
 8001294:	40023800 	.word	0x40023800
 8001298:	42470000 	.word	0x42470000
 800129c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a0:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80012a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1ea      	bne.n	8001282 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 8097 	beq.w	80013e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012be:	4b81      	ldr	r3, [pc, #516]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10f      	bne.n	80012ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	4b7d      	ldr	r3, [pc, #500]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a7c      	ldr	r2, [pc, #496]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b7a      	ldr	r3, [pc, #488]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e6:	2301      	movs	r3, #1
 80012e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ea:	4b77      	ldr	r3, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x474>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d118      	bne.n	8001328 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f6:	4b74      	ldr	r3, [pc, #464]	; (80014c8 <HAL_RCC_OscConfig+0x474>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a73      	ldr	r2, [pc, #460]	; (80014c8 <HAL_RCC_OscConfig+0x474>)
 80012fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001302:	f7ff fbef 	bl	8000ae4 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130a:	f7ff fbeb 	bl	8000ae4 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e10c      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	4b6a      	ldr	r3, [pc, #424]	; (80014c8 <HAL_RCC_OscConfig+0x474>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d106      	bne.n	800133e <HAL_RCC_OscConfig+0x2ea>
 8001330:	4b64      	ldr	r3, [pc, #400]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001334:	4a63      	ldr	r2, [pc, #396]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6713      	str	r3, [r2, #112]	; 0x70
 800133c:	e01c      	b.n	8001378 <HAL_RCC_OscConfig+0x324>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b05      	cmp	r3, #5
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x30c>
 8001346:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134a:	4a5e      	ldr	r2, [pc, #376]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	6713      	str	r3, [r2, #112]	; 0x70
 8001352:	4b5c      	ldr	r3, [pc, #368]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001356:	4a5b      	ldr	r2, [pc, #364]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6713      	str	r3, [r2, #112]	; 0x70
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0x324>
 8001360:	4b58      	ldr	r3, [pc, #352]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001364:	4a57      	ldr	r2, [pc, #348]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001366:	f023 0301 	bic.w	r3, r3, #1
 800136a:	6713      	str	r3, [r2, #112]	; 0x70
 800136c:	4b55      	ldr	r3, [pc, #340]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 800136e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001370:	4a54      	ldr	r2, [pc, #336]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001372:	f023 0304 	bic.w	r3, r3, #4
 8001376:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d015      	beq.n	80013ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001380:	f7ff fbb0 	bl	8000ae4 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001386:	e00a      	b.n	800139e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001388:	f7ff fbac 	bl	8000ae4 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	f241 3288 	movw	r2, #5000	; 0x1388
 8001396:	4293      	cmp	r3, r2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e0cb      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139e:	4b49      	ldr	r3, [pc, #292]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0ee      	beq.n	8001388 <HAL_RCC_OscConfig+0x334>
 80013aa:	e014      	b.n	80013d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ac:	f7ff fb9a 	bl	8000ae4 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b2:	e00a      	b.n	80013ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b4:	f7ff fb96 	bl	8000ae4 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e0b5      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ca:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1ee      	bne.n	80013b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d105      	bne.n	80013e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013dc:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	4a38      	ldr	r2, [pc, #224]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80013e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a1 	beq.w	8001534 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013f2:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d05c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d141      	bne.n	800148a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001406:	4b31      	ldr	r3, [pc, #196]	; (80014cc <HAL_RCC_OscConfig+0x478>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fb6a 	bl	8000ae4 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff fb66 	bl	8000ae4 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e087      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001426:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69da      	ldr	r2, [r3, #28]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	019b      	lsls	r3, r3, #6
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	085b      	lsrs	r3, r3, #1
 800144a:	3b01      	subs	r3, #1
 800144c:	041b      	lsls	r3, r3, #16
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	061b      	lsls	r3, r3, #24
 8001456:	491b      	ldr	r1, [pc, #108]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_RCC_OscConfig+0x478>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001462:	f7ff fb3f 	bl	8000ae4 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146a:	f7ff fb3b 	bl	8000ae4 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e05c      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x416>
 8001488:	e054      	b.n	8001534 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_RCC_OscConfig+0x478>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fb28 	bl	8000ae4 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001498:	f7ff fb24 	bl	8000ae4 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e045      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_RCC_OscConfig+0x470>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x444>
 80014b6:	e03d      	b.n	8001534 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d107      	bne.n	80014d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e038      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40007000 	.word	0x40007000
 80014cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_RCC_OscConfig+0x4ec>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d028      	beq.n	8001530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d121      	bne.n	8001530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d11a      	bne.n	8001530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001500:	4013      	ands	r3, r2
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001506:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001508:	4293      	cmp	r3, r2
 800150a:	d111      	bne.n	8001530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	085b      	lsrs	r3, r3, #1
 8001518:	3b01      	subs	r3, #1
 800151a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d107      	bne.n	8001530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0cc      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001558:	4b68      	ldr	r3, [pc, #416]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d90c      	bls.n	8001580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	4b65      	ldr	r3, [pc, #404]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	4b63      	ldr	r3, [pc, #396]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0b8      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d020      	beq.n	80015ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001598:	4b59      	ldr	r3, [pc, #356]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a58      	ldr	r2, [pc, #352]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b0:	4b53      	ldr	r3, [pc, #332]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a52      	ldr	r2, [pc, #328]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015bc:	4b50      	ldr	r3, [pc, #320]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	494d      	ldr	r1, [pc, #308]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d044      	beq.n	8001664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	4b47      	ldr	r3, [pc, #284]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d119      	bne.n	8001622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e07f      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d003      	beq.n	8001602 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001602:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e06f      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001612:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e067      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001622:	4b37      	ldr	r3, [pc, #220]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f023 0203 	bic.w	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4934      	ldr	r1, [pc, #208]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001634:	f7ff fa56 	bl	8000ae4 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	e00a      	b.n	8001652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163c:	f7ff fa52 	bl	8000ae4 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	; 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e04f      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 020c 	and.w	r2, r3, #12
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	429a      	cmp	r2, r3
 8001662:	d1eb      	bne.n	800163c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001664:	4b25      	ldr	r3, [pc, #148]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d20c      	bcs.n	800168c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e032      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4916      	ldr	r1, [pc, #88]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	490e      	ldr	r1, [pc, #56]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ca:	f000 f821 	bl	8001710 <HAL_RCC_GetSysClockFreq>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	490a      	ldr	r1, [pc, #40]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	5ccb      	ldrb	r3, [r1, r3]
 80016de:	fa22 f303 	lsr.w	r3, r2, r3
 80016e2:	4a09      	ldr	r2, [pc, #36]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80016e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff f9b6 	bl	8000a5c <HAL_InitTick>

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023c00 	.word	0x40023c00
 8001700:	40023800 	.word	0x40023800
 8001704:	08003a84 	.word	0x08003a84
 8001708:	20000000 	.word	0x20000000
 800170c:	20000004 	.word	0x20000004

08001710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001714:	b090      	sub	sp, #64	; 0x40
 8001716:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
 800171c:	2300      	movs	r3, #0
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001720:	2300      	movs	r3, #0
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001728:	4b59      	ldr	r3, [pc, #356]	; (8001890 <HAL_RCC_GetSysClockFreq+0x180>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b08      	cmp	r3, #8
 8001732:	d00d      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x40>
 8001734:	2b08      	cmp	r3, #8
 8001736:	f200 80a1 	bhi.w	800187c <HAL_RCC_GetSysClockFreq+0x16c>
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <HAL_RCC_GetSysClockFreq+0x34>
 800173e:	2b04      	cmp	r3, #4
 8001740:	d003      	beq.n	800174a <HAL_RCC_GetSysClockFreq+0x3a>
 8001742:	e09b      	b.n	800187c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001744:	4b53      	ldr	r3, [pc, #332]	; (8001894 <HAL_RCC_GetSysClockFreq+0x184>)
 8001746:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001748:	e09b      	b.n	8001882 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800174a:	4b53      	ldr	r3, [pc, #332]	; (8001898 <HAL_RCC_GetSysClockFreq+0x188>)
 800174c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800174e:	e098      	b.n	8001882 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001750:	4b4f      	ldr	r3, [pc, #316]	; (8001890 <HAL_RCC_GetSysClockFreq+0x180>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001758:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800175a:	4b4d      	ldr	r3, [pc, #308]	; (8001890 <HAL_RCC_GetSysClockFreq+0x180>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d028      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001766:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <HAL_RCC_GetSysClockFreq+0x180>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	099b      	lsrs	r3, r3, #6
 800176c:	2200      	movs	r2, #0
 800176e:	623b      	str	r3, [r7, #32]
 8001770:	627a      	str	r2, [r7, #36]	; 0x24
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001778:	2100      	movs	r1, #0
 800177a:	4b47      	ldr	r3, [pc, #284]	; (8001898 <HAL_RCC_GetSysClockFreq+0x188>)
 800177c:	fb03 f201 	mul.w	r2, r3, r1
 8001780:	2300      	movs	r3, #0
 8001782:	fb00 f303 	mul.w	r3, r0, r3
 8001786:	4413      	add	r3, r2
 8001788:	4a43      	ldr	r2, [pc, #268]	; (8001898 <HAL_RCC_GetSysClockFreq+0x188>)
 800178a:	fba0 1202 	umull	r1, r2, r0, r2
 800178e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001790:	460a      	mov	r2, r1
 8001792:	62ba      	str	r2, [r7, #40]	; 0x28
 8001794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001796:	4413      	add	r3, r2
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800179a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179c:	2200      	movs	r2, #0
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	61fa      	str	r2, [r7, #28]
 80017a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017aa:	f7fe fd29 	bl	8000200 <__aeabi_uldivmod>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4613      	mov	r3, r2
 80017b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017b6:	e053      	b.n	8001860 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b8:	4b35      	ldr	r3, [pc, #212]	; (8001890 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	099b      	lsrs	r3, r3, #6
 80017be:	2200      	movs	r2, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	617a      	str	r2, [r7, #20]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017ca:	f04f 0b00 	mov.w	fp, #0
 80017ce:	4652      	mov	r2, sl
 80017d0:	465b      	mov	r3, fp
 80017d2:	f04f 0000 	mov.w	r0, #0
 80017d6:	f04f 0100 	mov.w	r1, #0
 80017da:	0159      	lsls	r1, r3, #5
 80017dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e0:	0150      	lsls	r0, r2, #5
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	ebb2 080a 	subs.w	r8, r2, sl
 80017ea:	eb63 090b 	sbc.w	r9, r3, fp
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80017fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001802:	ebb2 0408 	subs.w	r4, r2, r8
 8001806:	eb63 0509 	sbc.w	r5, r3, r9
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	00eb      	lsls	r3, r5, #3
 8001814:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001818:	00e2      	lsls	r2, r4, #3
 800181a:	4614      	mov	r4, r2
 800181c:	461d      	mov	r5, r3
 800181e:	eb14 030a 	adds.w	r3, r4, sl
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	eb45 030b 	adc.w	r3, r5, fp
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001836:	4629      	mov	r1, r5
 8001838:	028b      	lsls	r3, r1, #10
 800183a:	4621      	mov	r1, r4
 800183c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001840:	4621      	mov	r1, r4
 8001842:	028a      	lsls	r2, r1, #10
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184a:	2200      	movs	r2, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	60fa      	str	r2, [r7, #12]
 8001850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001854:	f7fe fcd4 	bl	8000200 <__aeabi_uldivmod>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4613      	mov	r3, r2
 800185e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_RCC_GetSysClockFreq+0x180>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	0c1b      	lsrs	r3, r3, #16
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	3301      	adds	r3, #1
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001870:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001874:	fbb2 f3f3 	udiv	r3, r2, r3
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800187a:	e002      	b.n	8001882 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_RCC_GetSysClockFreq+0x184>)
 800187e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001884:	4618      	mov	r0, r3
 8001886:	3740      	adds	r7, #64	; 0x40
 8001888:	46bd      	mov	sp, r7
 800188a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	00f42400 	.word	0x00f42400
 8001898:	017d7840 	.word	0x017d7840

0800189c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000000 	.word	0x20000000

080018b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018b8:	f7ff fff0 	bl	800189c <HAL_RCC_GetHCLKFreq>
 80018bc:	4602      	mov	r2, r0
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	0a9b      	lsrs	r3, r3, #10
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	4903      	ldr	r1, [pc, #12]	; (80018d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ca:	5ccb      	ldrb	r3, [r1, r3]
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	08003a94 	.word	0x08003a94

080018dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018e0:	f7ff ffdc 	bl	800189c <HAL_RCC_GetHCLKFreq>
 80018e4:	4602      	mov	r2, r0
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	0b5b      	lsrs	r3, r3, #13
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	4903      	ldr	r1, [pc, #12]	; (8001900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018f2:	5ccb      	ldrb	r3, [r1, r3]
 80018f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	08003a94 	.word	0x08003a94

08001904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10b      	bne.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001928:	2b00      	cmp	r3, #0
 800192a:	d105      	bne.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001934:	2b00      	cmp	r3, #0
 8001936:	d075      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001938:	4b91      	ldr	r3, [pc, #580]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800193e:	f7ff f8d1 	bl	8000ae4 <HAL_GetTick>
 8001942:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001946:	f7ff f8cd 	bl	8000ae4 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e189      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001958:	4b8a      	ldr	r3, [pc, #552]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d009      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	019a      	lsls	r2, r3, #6
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	071b      	lsls	r3, r3, #28
 800197c:	4981      	ldr	r1, [pc, #516]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800197e:	4313      	orrs	r3, r2
 8001980:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01f      	beq.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001990:	4b7c      	ldr	r3, [pc, #496]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001996:	0f1b      	lsrs	r3, r3, #28
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	019a      	lsls	r2, r3, #6
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	061b      	lsls	r3, r3, #24
 80019aa:	431a      	orrs	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	071b      	lsls	r3, r3, #28
 80019b0:	4974      	ldr	r1, [pc, #464]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80019b8:	4b72      	ldr	r3, [pc, #456]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80019ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019be:	f023 021f 	bic.w	r2, r3, #31
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	496e      	ldr	r1, [pc, #440]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00d      	beq.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	019a      	lsls	r2, r3, #6
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	061b      	lsls	r3, r3, #24
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	071b      	lsls	r3, r3, #28
 80019f0:	4964      	ldr	r1, [pc, #400]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80019f8:	4b61      	ldr	r3, [pc, #388]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80019fe:	f7ff f871 	bl	8000ae4 <HAL_GetTick>
 8001a02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001a06:	f7ff f86d 	bl	8000ae4 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e129      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a18:	4b5a      	ldr	r3, [pc, #360]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d105      	bne.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d079      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001a3c:	4b52      	ldr	r3, [pc, #328]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a42:	f7ff f84f 	bl	8000ae4 <HAL_GetTick>
 8001a46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001a4a:	f7ff f84b 	bl	8000ae4 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e107      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001a5c:	4b49      	ldr	r3, [pc, #292]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a68:	d0ef      	beq.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d020      	beq.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001a76:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7c:	0f1b      	lsrs	r3, r3, #28
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	019a      	lsls	r2, r3, #6
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	061b      	lsls	r3, r3, #24
 8001a90:	431a      	orrs	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	071b      	lsls	r3, r3, #28
 8001a96:	493b      	ldr	r1, [pc, #236]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001a9e:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aa4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	4934      	ldr	r1, [pc, #208]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01e      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ac4:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aca:	0e1b      	lsrs	r3, r3, #24
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	019a      	lsls	r2, r3, #6
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	061b      	lsls	r3, r3, #24
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	071b      	lsls	r3, r3, #28
 8001ae4:	4927      	ldr	r1, [pc, #156]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001af2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	4922      	ldr	r1, [pc, #136]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b08:	f7fe ffec 	bl	8000ae4 <HAL_GetTick>
 8001b0c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001b10:	f7fe ffe8 	bl	8000ae4 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0a4      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b2e:	d1ef      	bne.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 808b 	beq.w	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	4a0f      	ldr	r2, [pc, #60]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b66:	f7fe ffbd 	bl	8000ae4 <HAL_GetTick>
 8001b6a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b6c:	e010      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7fe ffb9 	bl	8000ae4 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d909      	bls.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e075      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8001b80:	42470068 	.word	0x42470068
 8001b84:	40023800 	.word	0x40023800
 8001b88:	42470070 	.word	0x42470070
 8001b8c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b90:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0e8      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d02f      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d028      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bc2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bc4:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bca:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001bd0:	4a29      	ldr	r2, [pc, #164]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001bd6:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d114      	bne.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001be2:	f7fe ff7f 	bl	8000ae4 <HAL_GetTick>
 8001be6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7fe ff7b 	bl	8000ae4 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e035      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0ee      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c18:	d10d      	bne.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c2e:	4912      	ldr	r1, [pc, #72]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]
 8001c34:	e005      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001c3c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c40:	6093      	str	r3, [r2, #8]
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001c44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4e:	490a      	ldr	r1, [pc, #40]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d004      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8001c68:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40007000 	.word	0x40007000
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	42470e40 	.word	0x42470e40
 8001c80:	424711e0 	.word	0x424711e0

08001c84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e066      	b.n	8001d68 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7f5b      	ldrb	r3, [r3, #29]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fdde 	bl	800086c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	22ca      	movs	r2, #202	; 0xca
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2253      	movs	r2, #83	; 0x53
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f87a 	bl	8001dc0 <RTC_EnterInitMode>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d12c      	bne.n	8001d30 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ce8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6899      	ldr	r1, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	68d2      	ldr	r2, [r2, #12]
 8001d10:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6919      	ldr	r1, [r3, #16]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	041a      	lsls	r2, r3, #16
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f881 	bl	8001e2e <RTC_ExitInitMode>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d113      	bne.n	8001d5e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	22ff      	movs	r2, #255	; 0xff
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d8a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d8c:	f7fe feaa 	bl	8000ae4 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001d92:	e009      	b.n	8001da8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001d94:	f7fe fea6 	bl	8000ae4 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001da2:	d901      	bls.n	8001da8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e007      	b.n	8001db8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f003 0320 	and.w	r3, r3, #32
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0ee      	beq.n	8001d94 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d122      	bne.n	8001e24 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dee:	f7fe fe79 	bl	8000ae4 <HAL_GetTick>
 8001df2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001df4:	e00c      	b.n	8001e10 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001df6:	f7fe fe75 	bl	8000ae4 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e04:	d904      	bls.n	8001e10 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2204      	movs	r2, #4
 8001e0a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d102      	bne.n	8001e24 <RTC_EnterInitMode+0x64>
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d1e8      	bne.n	8001df6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e48:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10a      	bne.n	8001e6e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff89 	bl	8001d70 <HAL_RTC_WaitForSynchro>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d004      	beq.n	8001e6e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2204      	movs	r2, #4
 8001e68:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e03f      	b.n	8001f0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fd0e 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2224      	movs	r2, #36	; 0x24
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f929 	bl	8002114 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ed0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ee0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ef0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b08a      	sub	sp, #40	; 0x28
 8001f16:	af02      	add	r7, sp, #8
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d17c      	bne.n	800202c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_UART_Transmit+0x2c>
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e075      	b.n	800202e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_UART_Transmit+0x3e>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e06e      	b.n	800202e <HAL_UART_Transmit+0x11c>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2221      	movs	r2, #33	; 0x21
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f66:	f7fe fdbd 	bl	8000ae4 <HAL_GetTick>
 8001f6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	88fa      	ldrh	r2, [r7, #6]
 8001f70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	88fa      	ldrh	r2, [r7, #6]
 8001f76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f80:	d108      	bne.n	8001f94 <HAL_UART_Transmit+0x82>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d104      	bne.n	8001f94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	e003      	b.n	8001f9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001fa4:	e02a      	b.n	8001ffc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2200      	movs	r2, #0
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f840 	bl	8002036 <UART_WaitOnFlagUntilTimeout>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e036      	b.n	800202e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10b      	bne.n	8001fde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	3302      	adds	r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	e007      	b.n	8001fee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	781a      	ldrb	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	3301      	adds	r3, #1
 8001fec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1cf      	bne.n	8001fa6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2200      	movs	r2, #0
 800200e:	2140      	movs	r1, #64	; 0x40
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f810 	bl	8002036 <UART_WaitOnFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e006      	b.n	800202e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	e000      	b.n	800202e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800202c:	2302      	movs	r3, #2
  }
}
 800202e:	4618      	mov	r0, r3
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b090      	sub	sp, #64	; 0x40
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	4613      	mov	r3, r2
 8002044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002046:	e050      	b.n	80020ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800204a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204e:	d04c      	beq.n	80020ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002052:	2b00      	cmp	r3, #0
 8002054:	d007      	beq.n	8002066 <UART_WaitOnFlagUntilTimeout+0x30>
 8002056:	f7fe fd45 	bl	8000ae4 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002062:	429a      	cmp	r2, r3
 8002064:	d241      	bcs.n	80020ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	330c      	adds	r3, #12
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	e853 3f00 	ldrex	r3, [r3]
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800207c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	330c      	adds	r3, #12
 8002084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002086:	637a      	str	r2, [r7, #52]	; 0x34
 8002088:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800208a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800208c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800208e:	e841 2300 	strex	r3, r2, [r1]
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1e5      	bne.n	8002066 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3314      	adds	r3, #20
 80020a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	e853 3f00 	ldrex	r3, [r3]
 80020a8:	613b      	str	r3, [r7, #16]
   return(result);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3314      	adds	r3, #20
 80020b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ba:	623a      	str	r2, [r7, #32]
 80020bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020be:	69f9      	ldr	r1, [r7, #28]
 80020c0:	6a3a      	ldr	r2, [r7, #32]
 80020c2:	e841 2300 	strex	r3, r2, [r1]
 80020c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1e5      	bne.n	800209a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e00f      	b.n	800210a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4013      	ands	r3, r2
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	429a      	cmp	r2, r3
 8002106:	d09f      	beq.n	8002048 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3740      	adds	r7, #64	; 0x40
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002118:	b0c0      	sub	sp, #256	; 0x100
 800211a:	af00      	add	r7, sp, #0
 800211c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800212c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002130:	68d9      	ldr	r1, [r3, #12]
 8002132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	ea40 0301 	orr.w	r3, r0, r1
 800213c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800213e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	431a      	orrs	r2, r3
 800214c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	431a      	orrs	r2, r3
 8002154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800216c:	f021 010c 	bic.w	r1, r1, #12
 8002170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800217a:	430b      	orrs	r3, r1
 800217c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800217e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800218a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218e:	6999      	ldr	r1, [r3, #24]
 8002190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	ea40 0301 	orr.w	r3, r0, r1
 800219a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800219c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b8f      	ldr	r3, [pc, #572]	; (80023e0 <UART_SetConfig+0x2cc>)
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d005      	beq.n	80021b4 <UART_SetConfig+0xa0>
 80021a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4b8d      	ldr	r3, [pc, #564]	; (80023e4 <UART_SetConfig+0x2d0>)
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d104      	bne.n	80021be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021b4:	f7ff fb92 	bl	80018dc <HAL_RCC_GetPCLK2Freq>
 80021b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80021bc:	e003      	b.n	80021c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021be:	f7ff fb79 	bl	80018b4 <HAL_RCC_GetPCLK1Freq>
 80021c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021d0:	f040 810c 	bne.w	80023ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021d8:	2200      	movs	r2, #0
 80021da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80021de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80021e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80021e6:	4622      	mov	r2, r4
 80021e8:	462b      	mov	r3, r5
 80021ea:	1891      	adds	r1, r2, r2
 80021ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80021ee:	415b      	adcs	r3, r3
 80021f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021f6:	4621      	mov	r1, r4
 80021f8:	eb12 0801 	adds.w	r8, r2, r1
 80021fc:	4629      	mov	r1, r5
 80021fe:	eb43 0901 	adc.w	r9, r3, r1
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800220e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002216:	4690      	mov	r8, r2
 8002218:	4699      	mov	r9, r3
 800221a:	4623      	mov	r3, r4
 800221c:	eb18 0303 	adds.w	r3, r8, r3
 8002220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002224:	462b      	mov	r3, r5
 8002226:	eb49 0303 	adc.w	r3, r9, r3
 800222a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800222e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800223a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800223e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002242:	460b      	mov	r3, r1
 8002244:	18db      	adds	r3, r3, r3
 8002246:	653b      	str	r3, [r7, #80]	; 0x50
 8002248:	4613      	mov	r3, r2
 800224a:	eb42 0303 	adc.w	r3, r2, r3
 800224e:	657b      	str	r3, [r7, #84]	; 0x54
 8002250:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002254:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002258:	f7fd ffd2 	bl	8000200 <__aeabi_uldivmod>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4b61      	ldr	r3, [pc, #388]	; (80023e8 <UART_SetConfig+0x2d4>)
 8002262:	fba3 2302 	umull	r2, r3, r3, r2
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	011c      	lsls	r4, r3, #4
 800226a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800226e:	2200      	movs	r2, #0
 8002270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002274:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002278:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800227c:	4642      	mov	r2, r8
 800227e:	464b      	mov	r3, r9
 8002280:	1891      	adds	r1, r2, r2
 8002282:	64b9      	str	r1, [r7, #72]	; 0x48
 8002284:	415b      	adcs	r3, r3
 8002286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002288:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800228c:	4641      	mov	r1, r8
 800228e:	eb12 0a01 	adds.w	sl, r2, r1
 8002292:	4649      	mov	r1, r9
 8002294:	eb43 0b01 	adc.w	fp, r3, r1
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022ac:	4692      	mov	sl, r2
 80022ae:	469b      	mov	fp, r3
 80022b0:	4643      	mov	r3, r8
 80022b2:	eb1a 0303 	adds.w	r3, sl, r3
 80022b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022ba:	464b      	mov	r3, r9
 80022bc:	eb4b 0303 	adc.w	r3, fp, r3
 80022c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80022d8:	460b      	mov	r3, r1
 80022da:	18db      	adds	r3, r3, r3
 80022dc:	643b      	str	r3, [r7, #64]	; 0x40
 80022de:	4613      	mov	r3, r2
 80022e0:	eb42 0303 	adc.w	r3, r2, r3
 80022e4:	647b      	str	r3, [r7, #68]	; 0x44
 80022e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80022ee:	f7fd ff87 	bl	8000200 <__aeabi_uldivmod>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4611      	mov	r1, r2
 80022f8:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <UART_SetConfig+0x2d4>)
 80022fa:	fba3 2301 	umull	r2, r3, r3, r1
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2264      	movs	r2, #100	; 0x64
 8002302:	fb02 f303 	mul.w	r3, r2, r3
 8002306:	1acb      	subs	r3, r1, r3
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800230e:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <UART_SetConfig+0x2d4>)
 8002310:	fba3 2302 	umull	r2, r3, r3, r2
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800231c:	441c      	add	r4, r3
 800231e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002322:	2200      	movs	r2, #0
 8002324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002328:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800232c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002330:	4642      	mov	r2, r8
 8002332:	464b      	mov	r3, r9
 8002334:	1891      	adds	r1, r2, r2
 8002336:	63b9      	str	r1, [r7, #56]	; 0x38
 8002338:	415b      	adcs	r3, r3
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800233c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002340:	4641      	mov	r1, r8
 8002342:	1851      	adds	r1, r2, r1
 8002344:	6339      	str	r1, [r7, #48]	; 0x30
 8002346:	4649      	mov	r1, r9
 8002348:	414b      	adcs	r3, r1
 800234a:	637b      	str	r3, [r7, #52]	; 0x34
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002358:	4659      	mov	r1, fp
 800235a:	00cb      	lsls	r3, r1, #3
 800235c:	4651      	mov	r1, sl
 800235e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002362:	4651      	mov	r1, sl
 8002364:	00ca      	lsls	r2, r1, #3
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	4603      	mov	r3, r0
 800236c:	4642      	mov	r2, r8
 800236e:	189b      	adds	r3, r3, r2
 8002370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002374:	464b      	mov	r3, r9
 8002376:	460a      	mov	r2, r1
 8002378:	eb42 0303 	adc.w	r3, r2, r3
 800237c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800238c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002390:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002394:	460b      	mov	r3, r1
 8002396:	18db      	adds	r3, r3, r3
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
 800239a:	4613      	mov	r3, r2
 800239c:	eb42 0303 	adc.w	r3, r2, r3
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80023aa:	f7fd ff29 	bl	8000200 <__aeabi_uldivmod>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <UART_SetConfig+0x2d4>)
 80023b4:	fba3 1302 	umull	r1, r3, r3, r2
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	2164      	movs	r1, #100	; 0x64
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	3332      	adds	r3, #50	; 0x32
 80023c6:	4a08      	ldr	r2, [pc, #32]	; (80023e8 <UART_SetConfig+0x2d4>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	095b      	lsrs	r3, r3, #5
 80023ce:	f003 0207 	and.w	r2, r3, #7
 80023d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4422      	add	r2, r4
 80023da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023dc:	e105      	b.n	80025ea <UART_SetConfig+0x4d6>
 80023de:	bf00      	nop
 80023e0:	40011000 	.word	0x40011000
 80023e4:	40011400 	.word	0x40011400
 80023e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023f0:	2200      	movs	r2, #0
 80023f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80023fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80023fe:	4642      	mov	r2, r8
 8002400:	464b      	mov	r3, r9
 8002402:	1891      	adds	r1, r2, r2
 8002404:	6239      	str	r1, [r7, #32]
 8002406:	415b      	adcs	r3, r3
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
 800240a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800240e:	4641      	mov	r1, r8
 8002410:	1854      	adds	r4, r2, r1
 8002412:	4649      	mov	r1, r9
 8002414:	eb43 0501 	adc.w	r5, r3, r1
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	00eb      	lsls	r3, r5, #3
 8002422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002426:	00e2      	lsls	r2, r4, #3
 8002428:	4614      	mov	r4, r2
 800242a:	461d      	mov	r5, r3
 800242c:	4643      	mov	r3, r8
 800242e:	18e3      	adds	r3, r4, r3
 8002430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002434:	464b      	mov	r3, r9
 8002436:	eb45 0303 	adc.w	r3, r5, r3
 800243a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800243e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800244a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800245a:	4629      	mov	r1, r5
 800245c:	008b      	lsls	r3, r1, #2
 800245e:	4621      	mov	r1, r4
 8002460:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002464:	4621      	mov	r1, r4
 8002466:	008a      	lsls	r2, r1, #2
 8002468:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800246c:	f7fd fec8 	bl	8000200 <__aeabi_uldivmod>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4b60      	ldr	r3, [pc, #384]	; (80025f8 <UART_SetConfig+0x4e4>)
 8002476:	fba3 2302 	umull	r2, r3, r3, r2
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	011c      	lsls	r4, r3, #4
 800247e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002482:	2200      	movs	r2, #0
 8002484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002488:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800248c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002490:	4642      	mov	r2, r8
 8002492:	464b      	mov	r3, r9
 8002494:	1891      	adds	r1, r2, r2
 8002496:	61b9      	str	r1, [r7, #24]
 8002498:	415b      	adcs	r3, r3
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a0:	4641      	mov	r1, r8
 80024a2:	1851      	adds	r1, r2, r1
 80024a4:	6139      	str	r1, [r7, #16]
 80024a6:	4649      	mov	r1, r9
 80024a8:	414b      	adcs	r3, r1
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024b8:	4659      	mov	r1, fp
 80024ba:	00cb      	lsls	r3, r1, #3
 80024bc:	4651      	mov	r1, sl
 80024be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024c2:	4651      	mov	r1, sl
 80024c4:	00ca      	lsls	r2, r1, #3
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	4642      	mov	r2, r8
 80024ce:	189b      	adds	r3, r3, r2
 80024d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024d4:	464b      	mov	r3, r9
 80024d6:	460a      	mov	r2, r1
 80024d8:	eb42 0303 	adc.w	r3, r2, r3
 80024dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80024ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80024f8:	4649      	mov	r1, r9
 80024fa:	008b      	lsls	r3, r1, #2
 80024fc:	4641      	mov	r1, r8
 80024fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002502:	4641      	mov	r1, r8
 8002504:	008a      	lsls	r2, r1, #2
 8002506:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800250a:	f7fd fe79 	bl	8000200 <__aeabi_uldivmod>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4b39      	ldr	r3, [pc, #228]	; (80025f8 <UART_SetConfig+0x4e4>)
 8002514:	fba3 1302 	umull	r1, r3, r3, r2
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	2164      	movs	r1, #100	; 0x64
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	3332      	adds	r3, #50	; 0x32
 8002526:	4a34      	ldr	r2, [pc, #208]	; (80025f8 <UART_SetConfig+0x4e4>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002532:	441c      	add	r4, r3
 8002534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002538:	2200      	movs	r2, #0
 800253a:	673b      	str	r3, [r7, #112]	; 0x70
 800253c:	677a      	str	r2, [r7, #116]	; 0x74
 800253e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002542:	4642      	mov	r2, r8
 8002544:	464b      	mov	r3, r9
 8002546:	1891      	adds	r1, r2, r2
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	415b      	adcs	r3, r3
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002552:	4641      	mov	r1, r8
 8002554:	1851      	adds	r1, r2, r1
 8002556:	6039      	str	r1, [r7, #0]
 8002558:	4649      	mov	r1, r9
 800255a:	414b      	adcs	r3, r1
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800256a:	4659      	mov	r1, fp
 800256c:	00cb      	lsls	r3, r1, #3
 800256e:	4651      	mov	r1, sl
 8002570:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002574:	4651      	mov	r1, sl
 8002576:	00ca      	lsls	r2, r1, #3
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	4603      	mov	r3, r0
 800257e:	4642      	mov	r2, r8
 8002580:	189b      	adds	r3, r3, r2
 8002582:	66bb      	str	r3, [r7, #104]	; 0x68
 8002584:	464b      	mov	r3, r9
 8002586:	460a      	mov	r2, r1
 8002588:	eb42 0303 	adc.w	r3, r2, r3
 800258c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800258e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	663b      	str	r3, [r7, #96]	; 0x60
 8002598:	667a      	str	r2, [r7, #100]	; 0x64
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80025a6:	4649      	mov	r1, r9
 80025a8:	008b      	lsls	r3, r1, #2
 80025aa:	4641      	mov	r1, r8
 80025ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025b0:	4641      	mov	r1, r8
 80025b2:	008a      	lsls	r2, r1, #2
 80025b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025b8:	f7fd fe22 	bl	8000200 <__aeabi_uldivmod>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <UART_SetConfig+0x4e4>)
 80025c2:	fba3 1302 	umull	r1, r3, r3, r2
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2164      	movs	r1, #100	; 0x64
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	3332      	adds	r3, #50	; 0x32
 80025d4:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <UART_SetConfig+0x4e4>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	f003 020f 	and.w	r2, r3, #15
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4422      	add	r2, r4
 80025e8:	609a      	str	r2, [r3, #8]
}
 80025ea:	bf00      	nop
 80025ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80025f0:	46bd      	mov	sp, r7
 80025f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025f6:	bf00      	nop
 80025f8:	51eb851f 	.word	0x51eb851f

080025fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002600:	f000 fa7e 	bl	8002b00 <vTaskStartScheduler>
  
  return osOK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	bd80      	pop	{r7, pc}

0800260a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f103 0208 	add.w	r2, r3, #8
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f04f 32ff 	mov.w	r2, #4294967295
 8002622:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f103 0208 	add.w	r2, r3, #8
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f103 0208 	add.w	r2, r3, #8
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	601a      	str	r2, [r3, #0]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c2:	d103      	bne.n	80026cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	e00c      	b.n	80026e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3308      	adds	r3, #8
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	e002      	b.n	80026da <vListInsert+0x2e>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d2f6      	bcs.n	80026d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	601a      	str	r2, [r3, #0]
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800271e:	b480      	push	{r7}
 8002720:	b085      	sub	sp, #20
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6892      	ldr	r2, [r2, #8]
 8002734:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6852      	ldr	r2, [r2, #4]
 800273e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	429a      	cmp	r2, r3
 8002748:	d103      	bne.n	8002752 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	1e5a      	subs	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002772:	b580      	push	{r7, lr}
 8002774:	b08e      	sub	sp, #56	; 0x38
 8002776:	af04      	add	r7, sp, #16
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10a      	bne.n	800279c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278a:	f383 8811 	msr	BASEPRI, r3
 800278e:	f3bf 8f6f 	isb	sy
 8002792:	f3bf 8f4f 	dsb	sy
 8002796:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002798:	bf00      	nop
 800279a:	e7fe      	b.n	800279a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800279c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <xTaskCreateStatic+0x46>
	__asm volatile
 80027a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a6:	f383 8811 	msr	BASEPRI, r3
 80027aa:	f3bf 8f6f 	isb	sy
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	61fb      	str	r3, [r7, #28]
}
 80027b4:	bf00      	nop
 80027b6:	e7fe      	b.n	80027b6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80027b8:	2354      	movs	r3, #84	; 0x54
 80027ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	2b54      	cmp	r3, #84	; 0x54
 80027c0:	d00a      	beq.n	80027d8 <xTaskCreateStatic+0x66>
	__asm volatile
 80027c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c6:	f383 8811 	msr	BASEPRI, r3
 80027ca:	f3bf 8f6f 	isb	sy
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	61bb      	str	r3, [r7, #24]
}
 80027d4:	bf00      	nop
 80027d6:	e7fe      	b.n	80027d6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80027d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80027da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01e      	beq.n	800281e <xTaskCreateStatic+0xac>
 80027e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d01b      	beq.n	800281e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027f8:	2300      	movs	r3, #0
 80027fa:	9303      	str	r3, [sp, #12]
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f850 	bl	80028b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002818:	f000 f8d4 	bl	80029c4 <prvAddNewTaskToReadyList>
 800281c:	e001      	b.n	8002822 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002822:	697b      	ldr	r3, [r7, #20]
	}
 8002824:	4618      	mov	r0, r3
 8002826:	3728      	adds	r7, #40	; 0x28
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08c      	sub	sp, #48	; 0x30
 8002830:	af04      	add	r7, sp, #16
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fee1 	bl	8003608 <pvPortMalloc>
 8002846:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00e      	beq.n	800286c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800284e:	2054      	movs	r0, #84	; 0x54
 8002850:	f000 feda 	bl	8003608 <pvPortMalloc>
 8002854:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
 8002862:	e005      	b.n	8002870 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002864:	6978      	ldr	r0, [r7, #20]
 8002866:	f000 ff9b 	bl	80037a0 <vPortFree>
 800286a:	e001      	b.n	8002870 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d017      	beq.n	80028a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800287e:	88fa      	ldrh	r2, [r7, #6]
 8002880:	2300      	movs	r3, #0
 8002882:	9303      	str	r3, [sp, #12]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	9302      	str	r3, [sp, #8]
 8002888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f80e 	bl	80028b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800289a:	69f8      	ldr	r0, [r7, #28]
 800289c:	f000 f892 	bl	80029c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80028a0:	2301      	movs	r3, #1
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	e002      	b.n	80028ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295
 80028aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80028ac:	69bb      	ldr	r3, [r7, #24]
	}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3720      	adds	r7, #32
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b088      	sub	sp, #32
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028ce:	3b01      	subs	r3, #1
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f023 0307 	bic.w	r3, r3, #7
 80028dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <prvInitialiseNewTask+0x48>
	__asm volatile
 80028e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	617b      	str	r3, [r7, #20]
}
 80028fa:	bf00      	nop
 80028fc:	e7fe      	b.n	80028fc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01f      	beq.n	8002944 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	e012      	b.n	8002930 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	4413      	add	r3, r2
 8002910:	7819      	ldrb	r1, [r3, #0]
 8002912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	4413      	add	r3, r2
 8002918:	3334      	adds	r3, #52	; 0x34
 800291a:	460a      	mov	r2, r1
 800291c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d006      	beq.n	8002938 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3301      	adds	r3, #1
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	2b0f      	cmp	r3, #15
 8002934:	d9e9      	bls.n	800290a <prvInitialiseNewTask+0x54>
 8002936:	e000      	b.n	800293a <prvInitialiseNewTask+0x84>
			{
				break;
 8002938:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002942:	e003      	b.n	800294c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	2b06      	cmp	r3, #6
 8002950:	d901      	bls.n	8002956 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002952:	2306      	movs	r3, #6
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	2200      	movs	r2, #0
 8002966:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296a:	3304      	adds	r3, #4
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fe6c 	bl	800264a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002974:	3318      	adds	r3, #24
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fe67 	bl	800264a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002980:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	f1c3 0207 	rsb	r2, r3, #7
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	2200      	movs	r2, #0
 8002996:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	68f9      	ldr	r1, [r7, #12]
 80029a4:	69b8      	ldr	r0, [r7, #24]
 80029a6:	f000 fc23 	bl	80031f0 <pxPortInitialiseStack>
 80029aa:	4602      	mov	r2, r0
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029bc:	bf00      	nop
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80029cc:	f000 fd3a 	bl	8003444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80029d0:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <prvAddNewTaskToReadyList+0xb8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3301      	adds	r3, #1
 80029d6:	4a29      	ldr	r2, [pc, #164]	; (8002a7c <prvAddNewTaskToReadyList+0xb8>)
 80029d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80029da:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <prvAddNewTaskToReadyList+0xbc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80029e2:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <prvAddNewTaskToReadyList+0xbc>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <prvAddNewTaskToReadyList+0xb8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d110      	bne.n	8002a12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029f0:	f000 fabc 	bl	8002f6c <prvInitialiseTaskLists>
 80029f4:	e00d      	b.n	8002a12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029f6:	4b23      	ldr	r3, [pc, #140]	; (8002a84 <prvAddNewTaskToReadyList+0xc0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <prvAddNewTaskToReadyList+0xbc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d802      	bhi.n	8002a12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a0c:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <prvAddNewTaskToReadyList+0xbc>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <prvAddNewTaskToReadyList+0xc4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3301      	adds	r3, #1
 8002a18:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <prvAddNewTaskToReadyList+0xc4>)
 8002a1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	2201      	movs	r2, #1
 8002a22:	409a      	lsls	r2, r3
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <prvAddNewTaskToReadyList+0xc8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <prvAddNewTaskToReadyList+0xc8>)
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <prvAddNewTaskToReadyList+0xcc>)
 8002a3c:	441a      	add	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	4619      	mov	r1, r3
 8002a44:	4610      	mov	r0, r2
 8002a46:	f7ff fe0d 	bl	8002664 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a4a:	f000 fd2b 	bl	80034a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <prvAddNewTaskToReadyList+0xc0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00e      	beq.n	8002a74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <prvAddNewTaskToReadyList+0xbc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d207      	bcs.n	8002a74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <prvAddNewTaskToReadyList+0xd0>)
 8002a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	200003e8 	.word	0x200003e8
 8002a80:	200002e8 	.word	0x200002e8
 8002a84:	200003f4 	.word	0x200003f4
 8002a88:	20000404 	.word	0x20000404
 8002a8c:	200003f0 	.word	0x200003f0
 8002a90:	200002ec 	.word	0x200002ec
 8002a94:	e000ed04 	.word	0xe000ed04

08002a98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d017      	beq.n	8002ada <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <vTaskDelay+0x60>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <vTaskDelay+0x30>
	__asm volatile
 8002ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	60bb      	str	r3, [r7, #8]
}
 8002ac4:	bf00      	nop
 8002ac6:	e7fe      	b.n	8002ac6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002ac8:	f000 f87a 	bl	8002bc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002acc:	2100      	movs	r1, #0
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fb28 	bl	8003124 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ad4:	f000 f882 	bl	8002bdc <xTaskResumeAll>
 8002ad8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d107      	bne.n	8002af0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <vTaskDelay+0x64>)
 8002ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20000410 	.word	0x20000410
 8002afc:	e000ed04 	.word	0xe000ed04

08002b00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b0e:	463a      	mov	r2, r7
 8002b10:	1d39      	adds	r1, r7, #4
 8002b12:	f107 0308 	add.w	r3, r7, #8
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fcf4 	bl	8000504 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b1c:	6839      	ldr	r1, [r7, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	9202      	str	r2, [sp, #8]
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	2300      	movs	r3, #0
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	460a      	mov	r2, r1
 8002b2e:	491e      	ldr	r1, [pc, #120]	; (8002ba8 <vTaskStartScheduler+0xa8>)
 8002b30:	481e      	ldr	r0, [pc, #120]	; (8002bac <vTaskStartScheduler+0xac>)
 8002b32:	f7ff fe1e 	bl	8002772 <xTaskCreateStatic>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <vTaskStartScheduler+0xb0>)
 8002b3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b3c:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <vTaskStartScheduler+0xb0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b44:	2301      	movs	r3, #1
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	e001      	b.n	8002b4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d116      	bne.n	8002b82 <vTaskStartScheduler+0x82>
	__asm volatile
 8002b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	613b      	str	r3, [r7, #16]
}
 8002b66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <vTaskStartScheduler+0xb4>)
 8002b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <vTaskStartScheduler+0xb8>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <vTaskStartScheduler+0xbc>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b7c:	f000 fbc0 	bl	8003300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b80:	e00e      	b.n	8002ba0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d10a      	bne.n	8002ba0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	60fb      	str	r3, [r7, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	e7fe      	b.n	8002b9e <vTaskStartScheduler+0x9e>
}
 8002ba0:	bf00      	nop
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	08003a7c 	.word	0x08003a7c
 8002bac:	08002f3d 	.word	0x08002f3d
 8002bb0:	2000040c 	.word	0x2000040c
 8002bb4:	20000408 	.word	0x20000408
 8002bb8:	200003f4 	.word	0x200003f4
 8002bbc:	200003ec 	.word	0x200003ec

08002bc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <vTaskSuspendAll+0x18>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	4a03      	ldr	r2, [pc, #12]	; (8002bd8 <vTaskSuspendAll+0x18>)
 8002bcc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002bce:	bf00      	nop
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	20000410 	.word	0x20000410

08002bdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002bea:	4b41      	ldr	r3, [pc, #260]	; (8002cf0 <xTaskResumeAll+0x114>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <xTaskResumeAll+0x2c>
	__asm volatile
 8002bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	603b      	str	r3, [r7, #0]
}
 8002c04:	bf00      	nop
 8002c06:	e7fe      	b.n	8002c06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c08:	f000 fc1c 	bl	8003444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c0c:	4b38      	ldr	r3, [pc, #224]	; (8002cf0 <xTaskResumeAll+0x114>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	4a37      	ldr	r2, [pc, #220]	; (8002cf0 <xTaskResumeAll+0x114>)
 8002c14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c16:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <xTaskResumeAll+0x114>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d161      	bne.n	8002ce2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c1e:	4b35      	ldr	r3, [pc, #212]	; (8002cf4 <xTaskResumeAll+0x118>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d05d      	beq.n	8002ce2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c26:	e02e      	b.n	8002c86 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c28:	4b33      	ldr	r3, [pc, #204]	; (8002cf8 <xTaskResumeAll+0x11c>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	3318      	adds	r3, #24
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fd72 	bl	800271e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fd6d 	bl	800271e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	2201      	movs	r2, #1
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <xTaskResumeAll+0x120>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <xTaskResumeAll+0x120>)
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4a27      	ldr	r2, [pc, #156]	; (8002d00 <xTaskResumeAll+0x124>)
 8002c64:	441a      	add	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	f7ff fcf9 	bl	8002664 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c76:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <xTaskResumeAll+0x128>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d302      	bcc.n	8002c86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002c80:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <xTaskResumeAll+0x12c>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c86:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <xTaskResumeAll+0x11c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1cc      	bne.n	8002c28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c94:	f000 fa08 	bl	80030a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c98:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <xTaskResumeAll+0x130>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d010      	beq.n	8002cc6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002ca4:	f000 f836 	bl	8002d14 <xTaskIncrementTick>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <xTaskResumeAll+0x12c>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f1      	bne.n	8002ca4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002cc0:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <xTaskResumeAll+0x130>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <xTaskResumeAll+0x12c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <xTaskResumeAll+0x134>)
 8002cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ce2:	f000 fbdf 	bl	80034a4 <vPortExitCritical>

	return xAlreadyYielded;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000410 	.word	0x20000410
 8002cf4:	200003e8 	.word	0x200003e8
 8002cf8:	200003a8 	.word	0x200003a8
 8002cfc:	200003f0 	.word	0x200003f0
 8002d00:	200002ec 	.word	0x200002ec
 8002d04:	200002e8 	.word	0x200002e8
 8002d08:	200003fc 	.word	0x200003fc
 8002d0c:	200003f8 	.word	0x200003f8
 8002d10:	e000ed04 	.word	0xe000ed04

08002d14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d1e:	4b4e      	ldr	r3, [pc, #312]	; (8002e58 <xTaskIncrementTick+0x144>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f040 808e 	bne.w	8002e44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d28:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <xTaskIncrementTick+0x148>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d30:	4a4a      	ldr	r2, [pc, #296]	; (8002e5c <xTaskIncrementTick+0x148>)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d120      	bne.n	8002d7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d3c:	4b48      	ldr	r3, [pc, #288]	; (8002e60 <xTaskIncrementTick+0x14c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <xTaskIncrementTick+0x48>
	__asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	603b      	str	r3, [r7, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	e7fe      	b.n	8002d5a <xTaskIncrementTick+0x46>
 8002d5c:	4b40      	ldr	r3, [pc, #256]	; (8002e60 <xTaskIncrementTick+0x14c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	4b40      	ldr	r3, [pc, #256]	; (8002e64 <xTaskIncrementTick+0x150>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a3e      	ldr	r2, [pc, #248]	; (8002e60 <xTaskIncrementTick+0x14c>)
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4a3e      	ldr	r2, [pc, #248]	; (8002e64 <xTaskIncrementTick+0x150>)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4b3d      	ldr	r3, [pc, #244]	; (8002e68 <xTaskIncrementTick+0x154>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	4a3c      	ldr	r2, [pc, #240]	; (8002e68 <xTaskIncrementTick+0x154>)
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	f000 f995 	bl	80030a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <xTaskIncrementTick+0x158>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d348      	bcc.n	8002e1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d88:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <xTaskIncrementTick+0x14c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d92:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <xTaskIncrementTick+0x158>)
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295
 8002d98:	601a      	str	r2, [r3, #0]
					break;
 8002d9a:	e03e      	b.n	8002e1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d9c:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <xTaskIncrementTick+0x14c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d203      	bcs.n	8002dbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002db4:	4a2d      	ldr	r2, [pc, #180]	; (8002e6c <xTaskIncrementTick+0x158>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002dba:	e02e      	b.n	8002e1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fcac 	bl	800271e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d004      	beq.n	8002dd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3318      	adds	r3, #24
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fca3 	bl	800271e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	2201      	movs	r2, #1
 8002dde:	409a      	lsls	r2, r3
 8002de0:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <xTaskIncrementTick+0x15c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	4a22      	ldr	r2, [pc, #136]	; (8002e70 <xTaskIncrementTick+0x15c>)
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <xTaskIncrementTick+0x160>)
 8002df8:	441a      	add	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4610      	mov	r0, r2
 8002e02:	f7ff fc2f 	bl	8002664 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0a:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <xTaskIncrementTick+0x164>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d3b9      	bcc.n	8002d88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e18:	e7b6      	b.n	8002d88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e1a:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <xTaskIncrementTick+0x164>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e20:	4914      	ldr	r1, [pc, #80]	; (8002e74 <xTaskIncrementTick+0x160>)
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d901      	bls.n	8002e36 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002e32:	2301      	movs	r3, #1
 8002e34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <xTaskIncrementTick+0x168>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d007      	beq.n	8002e4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	e004      	b.n	8002e4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002e44:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <xTaskIncrementTick+0x16c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	4a0d      	ldr	r2, [pc, #52]	; (8002e80 <xTaskIncrementTick+0x16c>)
 8002e4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e4e:	697b      	ldr	r3, [r7, #20]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000410 	.word	0x20000410
 8002e5c:	200003ec 	.word	0x200003ec
 8002e60:	200003a0 	.word	0x200003a0
 8002e64:	200003a4 	.word	0x200003a4
 8002e68:	20000400 	.word	0x20000400
 8002e6c:	20000408 	.word	0x20000408
 8002e70:	200003f0 	.word	0x200003f0
 8002e74:	200002ec 	.word	0x200002ec
 8002e78:	200002e8 	.word	0x200002e8
 8002e7c:	200003fc 	.word	0x200003fc
 8002e80:	200003f8 	.word	0x200003f8

08002e84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e8a:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <vTaskSwitchContext+0xa4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e92:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <vTaskSwitchContext+0xa8>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e98:	e03f      	b.n	8002f1a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002e9a:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <vTaskSwitchContext+0xa8>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ea0:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <vTaskSwitchContext+0xac>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	fab3 f383 	clz	r3, r3
 8002eac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002eae:	7afb      	ldrb	r3, [r7, #11]
 8002eb0:	f1c3 031f 	rsb	r3, r3, #31
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	491f      	ldr	r1, [pc, #124]	; (8002f34 <vTaskSwitchContext+0xb0>)
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	607b      	str	r3, [r7, #4]
}
 8002edc:	bf00      	nop
 8002ede:	e7fe      	b.n	8002ede <vTaskSwitchContext+0x5a>
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <vTaskSwitchContext+0xb0>)
 8002eec:	4413      	add	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	3308      	adds	r3, #8
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d104      	bne.n	8002f10 <vTaskSwitchContext+0x8c>
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	605a      	str	r2, [r3, #4]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	4a08      	ldr	r2, [pc, #32]	; (8002f38 <vTaskSwitchContext+0xb4>)
 8002f18:	6013      	str	r3, [r2, #0]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000410 	.word	0x20000410
 8002f2c:	200003fc 	.word	0x200003fc
 8002f30:	200003f0 	.word	0x200003f0
 8002f34:	200002ec 	.word	0x200002ec
 8002f38:	200002e8 	.word	0x200002e8

08002f3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f44:	f000 f852 	bl	8002fec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <prvIdleTask+0x28>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d9f9      	bls.n	8002f44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <prvIdleTask+0x2c>)
 8002f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f60:	e7f0      	b.n	8002f44 <prvIdleTask+0x8>
 8002f62:	bf00      	nop
 8002f64:	200002ec 	.word	0x200002ec
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	e00c      	b.n	8002f92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <prvInitialiseTaskLists+0x60>)
 8002f84:	4413      	add	r3, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fb3f 	bl	800260a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b06      	cmp	r3, #6
 8002f96:	d9ef      	bls.n	8002f78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f98:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <prvInitialiseTaskLists+0x64>)
 8002f9a:	f7ff fb36 	bl	800260a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f9e:	480d      	ldr	r0, [pc, #52]	; (8002fd4 <prvInitialiseTaskLists+0x68>)
 8002fa0:	f7ff fb33 	bl	800260a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002fa4:	480c      	ldr	r0, [pc, #48]	; (8002fd8 <prvInitialiseTaskLists+0x6c>)
 8002fa6:	f7ff fb30 	bl	800260a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002faa:	480c      	ldr	r0, [pc, #48]	; (8002fdc <prvInitialiseTaskLists+0x70>)
 8002fac:	f7ff fb2d 	bl	800260a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002fb0:	480b      	ldr	r0, [pc, #44]	; (8002fe0 <prvInitialiseTaskLists+0x74>)
 8002fb2:	f7ff fb2a 	bl	800260a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <prvInitialiseTaskLists+0x78>)
 8002fb8:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <prvInitialiseTaskLists+0x64>)
 8002fba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <prvInitialiseTaskLists+0x7c>)
 8002fbe:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <prvInitialiseTaskLists+0x68>)
 8002fc0:	601a      	str	r2, [r3, #0]
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200002ec 	.word	0x200002ec
 8002fd0:	20000378 	.word	0x20000378
 8002fd4:	2000038c 	.word	0x2000038c
 8002fd8:	200003a8 	.word	0x200003a8
 8002fdc:	200003bc 	.word	0x200003bc
 8002fe0:	200003d4 	.word	0x200003d4
 8002fe4:	200003a0 	.word	0x200003a0
 8002fe8:	200003a4 	.word	0x200003a4

08002fec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ff2:	e019      	b.n	8003028 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002ff4:	f000 fa26 	bl	8003444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ff8:	4b10      	ldr	r3, [pc, #64]	; (800303c <prvCheckTasksWaitingTermination+0x50>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3304      	adds	r3, #4
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fb8a 	bl	800271e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <prvCheckTasksWaitingTermination+0x54>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3b01      	subs	r3, #1
 8003010:	4a0b      	ldr	r2, [pc, #44]	; (8003040 <prvCheckTasksWaitingTermination+0x54>)
 8003012:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <prvCheckTasksWaitingTermination+0x58>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3b01      	subs	r3, #1
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <prvCheckTasksWaitingTermination+0x58>)
 800301c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800301e:	f000 fa41 	bl	80034a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f810 	bl	8003048 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <prvCheckTasksWaitingTermination+0x58>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e1      	bne.n	8002ff4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	200003bc 	.word	0x200003bc
 8003040:	200003e8 	.word	0x200003e8
 8003044:	200003d0 	.word	0x200003d0

08003048 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003056:	2b00      	cmp	r3, #0
 8003058:	d108      	bne.n	800306c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fb9e 	bl	80037a0 <vPortFree>
				vPortFree( pxTCB );
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fb9b 	bl	80037a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800306a:	e018      	b.n	800309e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003072:	2b01      	cmp	r3, #1
 8003074:	d103      	bne.n	800307e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fb92 	bl	80037a0 <vPortFree>
	}
 800307c:	e00f      	b.n	800309e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003084:	2b02      	cmp	r3, #2
 8003086:	d00a      	beq.n	800309e <prvDeleteTCB+0x56>
	__asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	60fb      	str	r3, [r7, #12]
}
 800309a:	bf00      	nop
 800309c:	e7fe      	b.n	800309c <prvDeleteTCB+0x54>
	}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030ae:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <prvResetNextTaskUnblockTime+0x38>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d104      	bne.n	80030c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <prvResetNextTaskUnblockTime+0x3c>)
 80030ba:	f04f 32ff 	mov.w	r2, #4294967295
 80030be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80030c0:	e008      	b.n	80030d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c2:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <prvResetNextTaskUnblockTime+0x38>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <prvResetNextTaskUnblockTime+0x3c>)
 80030d2:	6013      	str	r3, [r2, #0]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	200003a0 	.word	0x200003a0
 80030e4:	20000408 	.word	0x20000408

080030e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <xTaskGetSchedulerState+0x34>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d102      	bne.n	80030fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80030f6:	2301      	movs	r3, #1
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	e008      	b.n	800310e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <xTaskGetSchedulerState+0x38>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003104:	2302      	movs	r3, #2
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	e001      	b.n	800310e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800310a:	2300      	movs	r3, #0
 800310c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800310e:	687b      	ldr	r3, [r7, #4]
	}
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	200003f4 	.word	0x200003f4
 8003120:	20000410 	.word	0x20000410

08003124 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800312e:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003134:	4b28      	ldr	r3, [pc, #160]	; (80031d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3304      	adds	r3, #4
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff faef 	bl	800271e <uxListRemove>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10b      	bne.n	800315e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003146:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	2201      	movs	r2, #1
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	4b21      	ldr	r3, [pc, #132]	; (80031dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4013      	ands	r3, r2
 800315a:	4a20      	ldr	r2, [pc, #128]	; (80031dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800315c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d10a      	bne.n	800317c <prvAddCurrentTaskToDelayedList+0x58>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800316c:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3304      	adds	r3, #4
 8003172:	4619      	mov	r1, r3
 8003174:	481a      	ldr	r0, [pc, #104]	; (80031e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003176:	f7ff fa75 	bl	8002664 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800317a:	e026      	b.n	80031ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003184:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	429a      	cmp	r2, r3
 8003192:	d209      	bcs.n	80031a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003194:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3304      	adds	r3, #4
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f7ff fa83 	bl	80026ac <vListInsert>
}
 80031a6:	e010      	b.n	80031ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3304      	adds	r3, #4
 80031b2:	4619      	mov	r1, r3
 80031b4:	4610      	mov	r0, r2
 80031b6:	f7ff fa79 	bl	80026ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d202      	bcs.n	80031ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80031c4:	4a09      	ldr	r2, [pc, #36]	; (80031ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6013      	str	r3, [r2, #0]
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	200003ec 	.word	0x200003ec
 80031d8:	200002e8 	.word	0x200002e8
 80031dc:	200003f0 	.word	0x200003f0
 80031e0:	200003d4 	.word	0x200003d4
 80031e4:	200003a4 	.word	0x200003a4
 80031e8:	200003a0 	.word	0x200003a0
 80031ec:	20000408 	.word	0x20000408

080031f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3b04      	subs	r3, #4
 8003200:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	3b04      	subs	r3, #4
 800320e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f023 0201 	bic.w	r2, r3, #1
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	3b04      	subs	r3, #4
 800321e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003220:	4a0c      	ldr	r2, [pc, #48]	; (8003254 <pxPortInitialiseStack+0x64>)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	3b14      	subs	r3, #20
 800322a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3b04      	subs	r3, #4
 8003236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f06f 0202 	mvn.w	r2, #2
 800323e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3b20      	subs	r3, #32
 8003244:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003246:	68fb      	ldr	r3, [r7, #12]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	08003259 	.word	0x08003259

08003258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <prvTaskExitError+0x54>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326a:	d00a      	beq.n	8003282 <prvTaskExitError+0x2a>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	60fb      	str	r3, [r7, #12]
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <prvTaskExitError+0x28>
	__asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	60bb      	str	r3, [r7, #8]
}
 8003294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003296:	bf00      	nop
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0fc      	beq.n	8003298 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800329e:	bf00      	nop
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	2000000c 	.word	0x2000000c

080032b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <pxCurrentTCBConst2>)
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	6808      	ldr	r0, [r1, #0]
 80032b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ba:	f380 8809 	msr	PSP, r0
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f04f 0000 	mov.w	r0, #0
 80032c6:	f380 8811 	msr	BASEPRI, r0
 80032ca:	4770      	bx	lr
 80032cc:	f3af 8000 	nop.w

080032d0 <pxCurrentTCBConst2>:
 80032d0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop

080032d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80032d8:	4808      	ldr	r0, [pc, #32]	; (80032fc <prvPortStartFirstTask+0x24>)
 80032da:	6800      	ldr	r0, [r0, #0]
 80032dc:	6800      	ldr	r0, [r0, #0]
 80032de:	f380 8808 	msr	MSP, r0
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f380 8814 	msr	CONTROL, r0
 80032ea:	b662      	cpsie	i
 80032ec:	b661      	cpsie	f
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	df00      	svc	0
 80032f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80032fa:	bf00      	nop
 80032fc:	e000ed08 	.word	0xe000ed08

08003300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003306:	4b46      	ldr	r3, [pc, #280]	; (8003420 <xPortStartScheduler+0x120>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a46      	ldr	r2, [pc, #280]	; (8003424 <xPortStartScheduler+0x124>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d10a      	bne.n	8003326 <xPortStartScheduler+0x26>
	__asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	613b      	str	r3, [r7, #16]
}
 8003322:	bf00      	nop
 8003324:	e7fe      	b.n	8003324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003326:	4b3e      	ldr	r3, [pc, #248]	; (8003420 <xPortStartScheduler+0x120>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a3f      	ldr	r2, [pc, #252]	; (8003428 <xPortStartScheduler+0x128>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d10a      	bne.n	8003346 <xPortStartScheduler+0x46>
	__asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	60fb      	str	r3, [r7, #12]
}
 8003342:	bf00      	nop
 8003344:	e7fe      	b.n	8003344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003346:	4b39      	ldr	r3, [pc, #228]	; (800342c <xPortStartScheduler+0x12c>)
 8003348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	22ff      	movs	r2, #255	; 0xff
 8003356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4b31      	ldr	r3, [pc, #196]	; (8003430 <xPortStartScheduler+0x130>)
 800336c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <xPortStartScheduler+0x134>)
 8003370:	2207      	movs	r2, #7
 8003372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003374:	e009      	b.n	800338a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003376:	4b2f      	ldr	r3, [pc, #188]	; (8003434 <xPortStartScheduler+0x134>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3b01      	subs	r3, #1
 800337c:	4a2d      	ldr	r2, [pc, #180]	; (8003434 <xPortStartScheduler+0x134>)
 800337e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003392:	2b80      	cmp	r3, #128	; 0x80
 8003394:	d0ef      	beq.n	8003376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003396:	4b27      	ldr	r3, [pc, #156]	; (8003434 <xPortStartScheduler+0x134>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f1c3 0307 	rsb	r3, r3, #7
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d00a      	beq.n	80033b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80033a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	60bb      	str	r3, [r7, #8]
}
 80033b4:	bf00      	nop
 80033b6:	e7fe      	b.n	80033b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033b8:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <xPortStartScheduler+0x134>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <xPortStartScheduler+0x134>)
 80033c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033c2:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <xPortStartScheduler+0x134>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033ca:	4a1a      	ldr	r2, [pc, #104]	; (8003434 <xPortStartScheduler+0x134>)
 80033cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80033d6:	4b18      	ldr	r3, [pc, #96]	; (8003438 <xPortStartScheduler+0x138>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a17      	ldr	r2, [pc, #92]	; (8003438 <xPortStartScheduler+0x138>)
 80033dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <xPortStartScheduler+0x138>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a14      	ldr	r2, [pc, #80]	; (8003438 <xPortStartScheduler+0x138>)
 80033e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80033ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80033ee:	f000 f8dd 	bl	80035ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80033f2:	4b12      	ldr	r3, [pc, #72]	; (800343c <xPortStartScheduler+0x13c>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80033f8:	f000 f8fc 	bl	80035f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80033fc:	4b10      	ldr	r3, [pc, #64]	; (8003440 <xPortStartScheduler+0x140>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0f      	ldr	r2, [pc, #60]	; (8003440 <xPortStartScheduler+0x140>)
 8003402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003408:	f7ff ff66 	bl	80032d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800340c:	f7ff fd3a 	bl	8002e84 <vTaskSwitchContext>
	prvTaskExitError();
 8003410:	f7ff ff22 	bl	8003258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	e000ed00 	.word	0xe000ed00
 8003424:	410fc271 	.word	0x410fc271
 8003428:	410fc270 	.word	0x410fc270
 800342c:	e000e400 	.word	0xe000e400
 8003430:	20000414 	.word	0x20000414
 8003434:	20000418 	.word	0x20000418
 8003438:	e000ed20 	.word	0xe000ed20
 800343c:	2000000c 	.word	0x2000000c
 8003440:	e000ef34 	.word	0xe000ef34

08003444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
	__asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	607b      	str	r3, [r7, #4]
}
 800345c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800345e:	4b0f      	ldr	r3, [pc, #60]	; (800349c <vPortEnterCritical+0x58>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3301      	adds	r3, #1
 8003464:	4a0d      	ldr	r2, [pc, #52]	; (800349c <vPortEnterCritical+0x58>)
 8003466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <vPortEnterCritical+0x58>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d10f      	bne.n	8003490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <vPortEnterCritical+0x5c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <vPortEnterCritical+0x4c>
	__asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	603b      	str	r3, [r7, #0]
}
 800348c:	bf00      	nop
 800348e:	e7fe      	b.n	800348e <vPortEnterCritical+0x4a>
	}
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	2000000c 	.word	0x2000000c
 80034a0:	e000ed04 	.word	0xe000ed04

080034a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <vPortExitCritical+0x50>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10a      	bne.n	80034c8 <vPortExitCritical+0x24>
	__asm volatile
 80034b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	607b      	str	r3, [r7, #4]
}
 80034c4:	bf00      	nop
 80034c6:	e7fe      	b.n	80034c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80034c8:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <vPortExitCritical+0x50>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <vPortExitCritical+0x50>)
 80034d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <vPortExitCritical+0x50>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d105      	bne.n	80034e6 <vPortExitCritical+0x42>
 80034da:	2300      	movs	r3, #0
 80034dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	2000000c 	.word	0x2000000c
	...

08003500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003500:	f3ef 8009 	mrs	r0, PSP
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	4b15      	ldr	r3, [pc, #84]	; (8003560 <pxCurrentTCBConst>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	f01e 0f10 	tst.w	lr, #16
 8003510:	bf08      	it	eq
 8003512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800351a:	6010      	str	r0, [r2, #0]
 800351c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003524:	f380 8811 	msr	BASEPRI, r0
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f7ff fca8 	bl	8002e84 <vTaskSwitchContext>
 8003534:	f04f 0000 	mov.w	r0, #0
 8003538:	f380 8811 	msr	BASEPRI, r0
 800353c:	bc09      	pop	{r0, r3}
 800353e:	6819      	ldr	r1, [r3, #0]
 8003540:	6808      	ldr	r0, [r1, #0]
 8003542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003546:	f01e 0f10 	tst.w	lr, #16
 800354a:	bf08      	it	eq
 800354c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003550:	f380 8809 	msr	PSP, r0
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	f3af 8000 	nop.w

08003560 <pxCurrentTCBConst>:
 8003560:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop

08003568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
	__asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	607b      	str	r3, [r7, #4]
}
 8003580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003582:	f7ff fbc7 	bl	8002d14 <xTaskIncrementTick>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <xPortSysTickHandler+0x40>)
 800358e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	2300      	movs	r3, #0
 8003596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	f383 8811 	msr	BASEPRI, r3
}
 800359e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	e000ed04 	.word	0xe000ed04

080035ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <vPortSetupTimerInterrupt+0x34>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <vPortSetupTimerInterrupt+0x38>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <vPortSetupTimerInterrupt+0x3c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <vPortSetupTimerInterrupt+0x40>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	099b      	lsrs	r3, r3, #6
 80035c8:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <vPortSetupTimerInterrupt+0x44>)
 80035ca:	3b01      	subs	r3, #1
 80035cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80035ce:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <vPortSetupTimerInterrupt+0x34>)
 80035d0:	2207      	movs	r2, #7
 80035d2:	601a      	str	r2, [r3, #0]
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	e000e010 	.word	0xe000e010
 80035e4:	e000e018 	.word	0xe000e018
 80035e8:	20000000 	.word	0x20000000
 80035ec:	10624dd3 	.word	0x10624dd3
 80035f0:	e000e014 	.word	0xe000e014

080035f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80035f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003604 <vPortEnableVFP+0x10>
 80035f8:	6801      	ldr	r1, [r0, #0]
 80035fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80035fe:	6001      	str	r1, [r0, #0]
 8003600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003602:	bf00      	nop
 8003604:	e000ed88 	.word	0xe000ed88

08003608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08a      	sub	sp, #40	; 0x28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003610:	2300      	movs	r3, #0
 8003612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003614:	f7ff fad4 	bl	8002bc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003618:	4b5b      	ldr	r3, [pc, #364]	; (8003788 <pvPortMalloc+0x180>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003620:	f000 f920 	bl	8003864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003624:	4b59      	ldr	r3, [pc, #356]	; (800378c <pvPortMalloc+0x184>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4013      	ands	r3, r2
 800362c:	2b00      	cmp	r3, #0
 800362e:	f040 8093 	bne.w	8003758 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01d      	beq.n	8003674 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003638:	2208      	movs	r2, #8
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	2b00      	cmp	r3, #0
 8003648:	d014      	beq.n	8003674 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f023 0307 	bic.w	r3, r3, #7
 8003650:	3308      	adds	r3, #8
 8003652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <pvPortMalloc+0x6c>
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	617b      	str	r3, [r7, #20]
}
 8003670:	bf00      	nop
 8003672:	e7fe      	b.n	8003672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d06e      	beq.n	8003758 <pvPortMalloc+0x150>
 800367a:	4b45      	ldr	r3, [pc, #276]	; (8003790 <pvPortMalloc+0x188>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	429a      	cmp	r2, r3
 8003682:	d869      	bhi.n	8003758 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003684:	4b43      	ldr	r3, [pc, #268]	; (8003794 <pvPortMalloc+0x18c>)
 8003686:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003688:	4b42      	ldr	r3, [pc, #264]	; (8003794 <pvPortMalloc+0x18c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800368e:	e004      	b.n	800369a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d903      	bls.n	80036ac <pvPortMalloc+0xa4>
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f1      	bne.n	8003690 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80036ac:	4b36      	ldr	r3, [pc, #216]	; (8003788 <pvPortMalloc+0x180>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d050      	beq.n	8003758 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2208      	movs	r2, #8
 80036bc:	4413      	add	r3, r2
 80036be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	1ad2      	subs	r2, r2, r3
 80036d0:	2308      	movs	r3, #8
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d91f      	bls.n	8003718 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80036d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <pvPortMalloc+0xf8>
	__asm volatile
 80036ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	613b      	str	r3, [r7, #16]
}
 80036fc:	bf00      	nop
 80036fe:	e7fe      	b.n	80036fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	1ad2      	subs	r2, r2, r3
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003712:	69b8      	ldr	r0, [r7, #24]
 8003714:	f000 f908 	bl	8003928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003718:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <pvPortMalloc+0x188>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	4a1b      	ldr	r2, [pc, #108]	; (8003790 <pvPortMalloc+0x188>)
 8003724:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003726:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <pvPortMalloc+0x188>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <pvPortMalloc+0x190>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d203      	bcs.n	800373a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003732:	4b17      	ldr	r3, [pc, #92]	; (8003790 <pvPortMalloc+0x188>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a18      	ldr	r2, [pc, #96]	; (8003798 <pvPortMalloc+0x190>)
 8003738:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	4b13      	ldr	r3, [pc, #76]	; (800378c <pvPortMalloc+0x184>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	431a      	orrs	r2, r3
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800374e:	4b13      	ldr	r3, [pc, #76]	; (800379c <pvPortMalloc+0x194>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	4a11      	ldr	r2, [pc, #68]	; (800379c <pvPortMalloc+0x194>)
 8003756:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003758:	f7ff fa40 	bl	8002bdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <pvPortMalloc+0x174>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	60fb      	str	r3, [r7, #12]
}
 8003778:	bf00      	nop
 800377a:	e7fe      	b.n	800377a <pvPortMalloc+0x172>
	return pvReturn;
 800377c:	69fb      	ldr	r3, [r7, #28]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3728      	adds	r7, #40	; 0x28
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20004024 	.word	0x20004024
 800378c:	20004038 	.word	0x20004038
 8003790:	20004028 	.word	0x20004028
 8003794:	2000401c 	.word	0x2000401c
 8003798:	2000402c 	.word	0x2000402c
 800379c:	20004030 	.word	0x20004030

080037a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d04d      	beq.n	800384e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80037b2:	2308      	movs	r3, #8
 80037b4:	425b      	negs	r3, r3
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4413      	add	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	4b24      	ldr	r3, [pc, #144]	; (8003858 <vPortFree+0xb8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <vPortFree+0x44>
	__asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	60fb      	str	r3, [r7, #12]
}
 80037e0:	bf00      	nop
 80037e2:	e7fe      	b.n	80037e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <vPortFree+0x62>
	__asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	60bb      	str	r3, [r7, #8]
}
 80037fe:	bf00      	nop
 8003800:	e7fe      	b.n	8003800 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	4b14      	ldr	r3, [pc, #80]	; (8003858 <vPortFree+0xb8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01e      	beq.n	800384e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d11a      	bne.n	800384e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <vPortFree+0xb8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	43db      	mvns	r3, r3
 8003822:	401a      	ands	r2, r3
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003828:	f7ff f9ca 	bl	8002bc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <vPortFree+0xbc>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4413      	add	r3, r2
 8003836:	4a09      	ldr	r2, [pc, #36]	; (800385c <vPortFree+0xbc>)
 8003838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800383a:	6938      	ldr	r0, [r7, #16]
 800383c:	f000 f874 	bl	8003928 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <vPortFree+0xc0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3301      	adds	r3, #1
 8003846:	4a06      	ldr	r2, [pc, #24]	; (8003860 <vPortFree+0xc0>)
 8003848:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800384a:	f7ff f9c7 	bl	8002bdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20004038 	.word	0x20004038
 800385c:	20004028 	.word	0x20004028
 8003860:	20004034 	.word	0x20004034

08003864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800386a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800386e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <prvHeapInit+0xac>)
 8003872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00c      	beq.n	8003898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	3307      	adds	r3, #7
 8003882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0307 	bic.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	4a1f      	ldr	r2, [pc, #124]	; (8003910 <prvHeapInit+0xac>)
 8003894:	4413      	add	r3, r2
 8003896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800389c:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <prvHeapInit+0xb0>)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80038a2:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <prvHeapInit+0xb0>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	4413      	add	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80038b0:	2208      	movs	r2, #8
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0307 	bic.w	r3, r3, #7
 80038be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a15      	ldr	r2, [pc, #84]	; (8003918 <prvHeapInit+0xb4>)
 80038c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80038c6:	4b14      	ldr	r3, [pc, #80]	; (8003918 <prvHeapInit+0xb4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2200      	movs	r2, #0
 80038cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <prvHeapInit+0xb4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	1ad2      	subs	r2, r2, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <prvHeapInit+0xb4>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4a0a      	ldr	r2, [pc, #40]	; (800391c <prvHeapInit+0xb8>)
 80038f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	4a09      	ldr	r2, [pc, #36]	; (8003920 <prvHeapInit+0xbc>)
 80038fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80038fc:	4b09      	ldr	r3, [pc, #36]	; (8003924 <prvHeapInit+0xc0>)
 80038fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003902:	601a      	str	r2, [r3, #0]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	2000041c 	.word	0x2000041c
 8003914:	2000401c 	.word	0x2000401c
 8003918:	20004024 	.word	0x20004024
 800391c:	2000402c 	.word	0x2000402c
 8003920:	20004028 	.word	0x20004028
 8003924:	20004038 	.word	0x20004038

08003928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003930:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <prvInsertBlockIntoFreeList+0xac>)
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	e002      	b.n	800393c <prvInsertBlockIntoFreeList+0x14>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	429a      	cmp	r2, r3
 8003944:	d8f7      	bhi.n	8003936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	4413      	add	r3, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	429a      	cmp	r2, r3
 8003956:	d108      	bne.n	800396a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	441a      	add	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	441a      	add	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d118      	bne.n	80039b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <prvInsertBlockIntoFreeList+0xb0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d00d      	beq.n	80039a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	441a      	add	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	e008      	b.n	80039b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <prvInsertBlockIntoFreeList+0xb0>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	e003      	b.n	80039b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d002      	beq.n	80039c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	2000401c 	.word	0x2000401c
 80039d8:	20004024 	.word	0x20004024

080039dc <__libc_init_array>:
 80039dc:	b570      	push	{r4, r5, r6, lr}
 80039de:	4d0d      	ldr	r5, [pc, #52]	; (8003a14 <__libc_init_array+0x38>)
 80039e0:	4c0d      	ldr	r4, [pc, #52]	; (8003a18 <__libc_init_array+0x3c>)
 80039e2:	1b64      	subs	r4, r4, r5
 80039e4:	10a4      	asrs	r4, r4, #2
 80039e6:	2600      	movs	r6, #0
 80039e8:	42a6      	cmp	r6, r4
 80039ea:	d109      	bne.n	8003a00 <__libc_init_array+0x24>
 80039ec:	4d0b      	ldr	r5, [pc, #44]	; (8003a1c <__libc_init_array+0x40>)
 80039ee:	4c0c      	ldr	r4, [pc, #48]	; (8003a20 <__libc_init_array+0x44>)
 80039f0:	f000 f820 	bl	8003a34 <_init>
 80039f4:	1b64      	subs	r4, r4, r5
 80039f6:	10a4      	asrs	r4, r4, #2
 80039f8:	2600      	movs	r6, #0
 80039fa:	42a6      	cmp	r6, r4
 80039fc:	d105      	bne.n	8003a0a <__libc_init_array+0x2e>
 80039fe:	bd70      	pop	{r4, r5, r6, pc}
 8003a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a04:	4798      	blx	r3
 8003a06:	3601      	adds	r6, #1
 8003a08:	e7ee      	b.n	80039e8 <__libc_init_array+0xc>
 8003a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a0e:	4798      	blx	r3
 8003a10:	3601      	adds	r6, #1
 8003a12:	e7f2      	b.n	80039fa <__libc_init_array+0x1e>
 8003a14:	08003aa4 	.word	0x08003aa4
 8003a18:	08003aa4 	.word	0x08003aa4
 8003a1c:	08003aa4 	.word	0x08003aa4
 8003a20:	08003aa8 	.word	0x08003aa8

08003a24 <memset>:
 8003a24:	4402      	add	r2, r0
 8003a26:	4603      	mov	r3, r0
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d100      	bne.n	8003a2e <memset+0xa>
 8003a2c:	4770      	bx	lr
 8003a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a32:	e7f9      	b.n	8003a28 <memset+0x4>

08003a34 <_init>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	bf00      	nop
 8003a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3a:	bc08      	pop	{r3}
 8003a3c:	469e      	mov	lr, r3
 8003a3e:	4770      	bx	lr

08003a40 <_fini>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	bf00      	nop
 8003a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a46:	bc08      	pop	{r3}
 8003a48:	469e      	mov	lr, r3
 8003a4a:	4770      	bx	lr
